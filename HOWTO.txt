##### Compiling the formilux toolchain v0.5.3 #####

0) Quick starter for those who don't want to read the doc. Here's how
   I'm used to build the whole toolchain at once :

$ time make INSTALLDIR=/build/toolchain-0.5.3 \
  MPFLAGS="-j6" GCCVERSIONS="gcc34 gcc29 gcc33 gcc41" \
  all install space tool-archive root-archive \
  2>&1 |tee build.log ; echo $?


1) get the following files and put them together in a directory (symlinks are
   also supported) :

   - binutils-2.16.1.tar.bz2          : http://www.fr.kernel.org/pub/linux/devel/binutils/binutils-2.16.1.tar.bz2
   - glibc-2.2.5.tar.bz2              : http://ftp.club-internet.fr/pub/mirrors/ftp.gnu.org/gnu/glibc/glibc-2.2.5.tar.gz
   - glibc-linuxthreads-2.2.5.tar.bz2 : http://ftp.club-internet.fr/pub/mirrors/ftp.gnu.org/gnu/glibc/glibc-linuxthreads-2.2.5.tar.gz
   - gcc-20011006.tar.bz2             : http://www.uclibc.org/downloads/toolchain/gcc-20011006.tar.bz2
   - gcc2.95-mega.patch.bz2           : http://cvs.sourceforge.net/viewcvs.py/*checkout*/tuxscreen/buildroot-tux/sources/gcc2.95-mega.patch.bz2?rev=1.1
     or extract it from http://www.fr.kernel.org/pub/linux/libs/uclibc/buildroot-0.9.27.tar.bz2

Optional :
   - dietlibc-0.31.tar.bz2            : http://www.fr.kernel.org/pub/linux/libs/dietlibc/dietlibc-0.31.tar.bz2
   - uClibc-0.9.29.tar.bz2            : http://www.uclibc.org/downloads/uClibc-0.9.29.tar.bz2

You can also get gcc-3.3.6, gcc-3.4.6, and gcc-4.1.2, which are covered by this
makefile. If some files are not in .bz2, either recompress them or change the
makefile.

2) get kernel-headers-2.4.29-hf2 or similar. A previous version can be
   downloaded there :

   http://www.uclibc.org/downloads/toolchain/kernel-headers-2.4.25.tar.bz2

3) cd to an empty directory with at least 780 MB free, or 2 GB if all 4
   compilers will be built. Untar 'flx-toolchain-0.5.3.tgz' there, and run
   "make help" from this new directory to get used to the make variables :

$ cd $freespace
$ tar zxf $somedir/flx-toolchain-0.5.3.tgz
$ cd toolchain-0.5.3
$ make help

4) create a symlink named 'download' pointing to the directory where you put all the
   files above, then edit your Makefile to ensure that it references the exact same
   versions that are available under 'download'.

$ ln -s $download_dir download

5) update the number of parallel jobs in the Makefile (MPFLAGS) to match a
   reasonnable limit based on your number of CPUs and available memory.
   Recommended values are between nCPU+1 and 2*nCPU. Check that the default
   variables suit your expectations, particularly for INSTALLDIR and
   GCCVERSIONS. INSTALLDIR must be an absolute path if specified. It defaults
   to a subdirectory of the current directory. This is the only location the
   tools will run from, so if the resulting toolchain is intended to be
   portable, care must be taken when chosing the directory. About 290 MB will
   be needed in that directory (in addition to the 2 GB of the current one).

   GCCVERSIONS may be initialized to the list of compilers to build. Please
   note that the default compiler set by "make default_gcc" (implied by "all")
   will be the first one specified in GCCVERSIONS. It is the compiler which
   will be linked to the canonical names ("gcc", ...).

   Then run "make all", and redirect its output to a file which will save you
   hours if something goes wrong. Echoing the command result is a quick way to
   inform you that everything went OK if it outputs '0'. Examples :

$ time make all >build.log 2>&1 ; echo $?
or
$ make HOST=i686-linux TARGET=i586-linux all >build.log 2>&1
or
$ make INSTALLDIR=/build/toolchain-0.5.3 GCCVERSIONS="gcc34 gcc29 gcc41" all

It is then recommended to run "make install" with the same variables. This
will prepare the root directory for easier upgrades :

$ make INSTALLDIR=/build/toolchain-0.5.3 install

This also works on non-x86 hosts, validated on Sparc64 (except perhaps for the
dietlibc stuff). Note: HOST and TARGET *MUST* be different, otherwise gcc will
not detect that it must configure a cross-compiler. This is the reason why by
default, HOST is set to i686-host-linux and TARGET is set to i586-flx-linux.

At the end of installation, it is possible to run "make space" to remove
previously extracted sources, and "make tool-archive root-archive" to
create an archive of the tools and root respectively. If INSTALLDIR was
specified during build, it is still necessary here of course.


### using the toolchain ###

Once the new toolchain is complete, assuming we run HOST=i686-host-linux and
TARGET=i586-flx-linux and INSTALLDIR=/build/toolchain-0.5.3 :

$ export FLXROOTDIR=/build/toolchain-0.5.3/i586-flx-linux/root
$ export FLXTOOLDIR=/build/toolchain-0.5.3/i586-flx-linux/tool-i686-host-linux
$ export PATH=$FLXTOOLDIR/usr/bin:$PATH
$ export FLXCROSS=i586-flx-linux-

and use i586-flx-linux-{gcc,ld,strip,ar,...} or ${FLXCROSS}gcc whenever needed.


### compiling something with glibc ###

$ cd $somethingdir
$ i586-flx-linux-gcc -Wl,--gc-sections -o something something.c
$ i586-flx-linux-strip --strip-unneeded -x -R .comment -R .note something


### compiling something with uclibc ###

$ uclibc i586-flx-linux-gcc -Wl,--gc-sections -o something something.c
$ i586-flx-linux-strip --strip-unneeded -x -R .comment -R .note something


### compiling something with dietlibc ###

$ export PATH=$FLXTOOLDIR/diet/bin:$PATH
$ cd $somethingdir
$ diet i586-flx-linux-gcc -Wl,--gc-sections -o something something.c
$ i586-flx-linux-strip --strip-unneeded -x -R .comment -R .note something

Note that dietlibc does not support absolute path to compiler.


### adding new libraries and includes to the root dir ###

If a particular package is needed (libraries, includes, etc...), install it
normally in $PWD/i586-flx-linux/root/ just as if it were the real root target,
and do not forget to remove all ".la" files (or at least to remove the absolute
paths in them) :

$ tar -C $FLXROOTDIR/. -zxf /var/flx-pkg/zlib-1.1.4-flx0.1/.tgz

And use it without specifying any path, it will be used automatically :

$ cd $somethingdir
$ i586-flx-linux-gcc -Wl,--gc-sections -o something something.c -lz
$ i586-flx-linux-strip --strip-unneeded -x -R .comment -R .note something

or the same with uclibc :

$ uclibc i586-flx-linux-gcc-3.4 -Wl,--gc-sections -o something something.c -lz
$ i586-flx-linux-strip --strip-unneeded -x -R .comment -R .note something

Note: both dietlibc and uclibc wrappers set their own library paths before
usr/lib, so that linking with libc-specific libs such as libpthread should
work in all cases.

It is quite convenient to be able to switch between root profiles. That's why
"make install" replaces the root with a symlink to a "CURRENT" symlink pointing
to "std-group-0". It's then very easy to duplicate this directory to other ones
and untar various packages overthere. Never forget to use the "U" option of the
"tar" command in order to remove possibly existing files in case of conflict
instead of overwriting them. It is highly recommended to add the names of the
added packages to the a file holding the same name as the directory, suffixed
with ".txt" :

$ ls -l /build/toolchain-0.5.3/i586-flx-linux/pool/groups/
total 16
drwxr-sr-x  4 willy distrib 145 2008-05-27 17:56 ./
drwxr-sr-x  5 willy distrib  63 2008-05-11 10:07 ../
lrwxrwxrwx  1 willy distrib  11 2008-05-11 11:36 CURRENT -> std-group-1/
-rwxr-xr-x  1 willy distrib 182 2008-05-11 11:08 list-to-pkgdir.sh*
-rwxr-xr-x  1 willy distrib 488 2008-05-11 11:16 list-to-tgz.sh*
drwxr-sr-x  4 willy distrib  26 2008-05-11 09:46 std-group-0/
-rw-r--r--  1 willy distrib  21 2008-05-11 10:07 std-group-0.txt
drwxr-sr-x  8 willy distrib  67 2008-05-11 11:19 std-group-1/
-rw-r--r--  1 willy distrib 570 2008-05-27 17:52 std-group-1.txt

The two scripts "list-to-pkgdir.sh" and "list-to-tgz.sh" are there to ease the
packages management. They are used to convert a list of packages such as
"std-group-1.txt" fed into stdin to a list of package directories or a list
of tar.gz packages found in $PKGROOT. It is recommended to leave std-group-0
intact to always keep a genuine image of the root directory.


### using the toolchain from pkg ###

PKG automatically combines FLXCROSS and {CC,CXX,...} to build the tool names.

$ export FLXTOOLDIR=/build/toolchain-0.5.3/i586-flx-linux/tool-i686-host-linux
$ export FLXROOTDIR=/build/toolchain-0.5.3/i586-flx-linux/root
$ export PATH=$FLXTOOLDIR/usr/bin:$PATH
$ export FLXCROSS=i586-flx-linux-

$ pkg --env
...
CC=i586-flx-linux-gcc
CXX=i586-flx-linux-g++
...

$ CC=gcc-4.1 pkg --env
...
CC=i586-flx-linux-gcc-4.1
CXX=i586-flx-linux-g++-4.1
...

### that's all folks ###

