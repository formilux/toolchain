Organisation

toolchain-MAJOR.MINOR/
	add-ons/	<- files (uclibc, ...)
	config/		<- config files
	doc/		<- documentation
	lists/		<- tarball lists per platform
	local/		<- tarballs of required local tools
	patches/	<- patches to ct-ng and to add to ct-ng
	src/		<- sources required to build packages
	bin/		<- output files for local tools + ct-ng
	lib/		<- output files for local tools + ct-ng
	share/		<- output files for local tools + ct-ng
	arch/		<- output of all toolchains
	tmp/		<- may be used during build

---------

build steps


1) ct-ng

mkdir tmp
cd tmp
tar xf ../local/crosstool-ng-1.13.0.tar.bz2
cd crosstool-ng-1.13.0/

# patches? => ct-ng-1.13.0-glibc-1.14.1.diff

./configure --with-bash=/bin/bash4 --prefix=/build/toolchain-2.0
make
make install
cd ..
rm -rf crosstool-ng-1.13.0
cd ..


2) build gcc+glibc

 cd tmp
 cp ../config/config-gcc446-glibc2141-armeabi .config
 ../bin/ct-ng oldconfig
 vi .config   # (edit paths)
 ../bin/ct-ng oldconfig
 ../bin/ct-ng build

----------------------
Note on host compilers :
 - gcc-4.1.2 works and needs to be build first just for this.
 - gcc-3.4.6 cannot build due to old g++
 - gcc-4.2.1 causes build errors when installing gcc-core (__ctype_*).
 - gcc-4.1.1 causes even earlier build errors, GMP >= 4.1.3 is not
   found despite being installed, because a scary -L/usr/lib/gcc/.. is
   added to the build of PPL :

[CFG  ]    checking how to link with libgmp... /build/toolchain-2.0/tmp/arm-flx-linux-gnueabi/build/static/lib/libgmp.a
[CFG  ]    checking how to link with libgmpxx... /build/toolchain-2.0/tmp/arm-flx-linux-gnueabi/build/static/lib/libgmpxx.a -L/usr/lib/gcc/.. /build/toolchain-2.0/tmp/arm-flx-linux-gnueabi/build/static/lib/libgmp.a
[CFG  ]    checking for the GMP library version 4.1.3 or above... no
[ERROR]    configure: error: Cannot find GMP version 4.1.3 or higher.

The build dirs use 3 GB of temp space :

willy@wtap:tmp$ du -sc *
1551590 arm-flx-linux-gnueabi
29529   build.log
1565529 src
1       tarballs
44      tools
3146691 total

The resulting toolchain is 120 MB only :

willy@wtap:toolchain-2.0$ du -sc arch/arm-flx-linux-gnueabi/*
89027   arch/arm-flx-linux-gnueabi/arm-flx-linux-gnueabi
4420    arch/arm-flx-linux-gnueabi/bin
1125    arch/arm-flx-linux-gnueabi/build.log.bz2
0       arch/arm-flx-linux-gnueabi/include
1754    arch/arm-flx-linux-gnueabi/lib
24776   arch/arm-flx-linux-gnueabi/libexec
0       arch/arm-flx-linux-gnueabi/share
121101  total

Note: native utilities (gdb, strace, ...) are not stripped !
      sysroot is not stripped either (probably better this way) !

ATTENTION !

kernel headers MUST be installed in the sysroot prior to building glibc :

'make' '-C' '/build/toolchain-2.0/tmp/src/linux-3.0.4' 'O=/build/toolchain-2.0/tmp/arm-flx-linux-gnueabi/build/build-kernel-headers' 'ARCH=arm' 'INSTALL_HDR_PATH=/build/toolchain-2.0/arch/arm-flx-linux-gnueabi/arm-flx-linux-gnueabi/sysroot/usr' 'V=0' 'headers_install'

   make ARCH=arm INSTALL_HDR_PATH=/build/toolchain-2.0/arch/arm-flx-linux-gnueabi/arm-flx-linux-gnueabi/sysroot/usr V=0 headers_install

Note: they are already in the sysroot tarball.
      => we don't need the kernel anymore !

--------------------
  - to be tried :
       - gcc 4.4.6 + glibc 2.14.1 + glibc-ports 2.14.1 + kernel 3.0.8 => breaks nginx
       - gcc 4.3.6 + glibc 2.12.1 + glibc-ports 2.12.1 + kernel 2.6.35.14 => breaks nginx
       - gcc 4.3.6 + glibc 2.8/9 + glibc-ports 2.8/9 + binutils 2.21 + kernel 2.6.35.14 => breaks nginx
       - gcc 4.2.4 + glibc 2.7 + glibc-ports 2.7 + kernel 2.6.35.14 + binutils 2.19.1a => fails on glibc

       - gcc 4.3.6 + glibc 2.9 + glibc-ports 2.9 + binutils 2.19.1a + kernel 3.0 without forced unwinding => works !

--------------------

Big bug: glibc needs to be informed that the target is using EABI. For this, the target
platform must have "gnueabi" in its name. The solution simply is to set FLXTARGOS to
"flx-linux-gnueabi" instead of just "flx-linux".

--------------------

uClibc :
  - the kernel include path must be usr/include from the sysroot, not the real
    kernel !
  - make install does not create the target directory and fails on a rule
    which checks for $prefix.../lib.
    => mkdir -p /build/toolchain-2.0/arch/arm-flx-uclibc-gnueabi/lib first
  - make install rebuilds everything each time ! Maybe running it alone is enough.

building dmidecode with uclibc fails :
/build/toolchain-2.0/arch/arm-flx-uclibc-gnueabi/usr/lib/libc_pic.a(sigrestorer.os):(.ARM.exidx+0x0): undefined reference to `__aeabi_unwind_cpp_pr1'

=> need to add -lgcc_eh 
=> solved by the change below :

Note that this does not work for other tools (eg: zlib). The best solution appears to merge
libgcc_eh.a's contents into libgcc.a :

   cd /build/toolchain-2.0/platform/arm-gcc44-gl214-eabi/lib/gcc/arm-flx-linux-gnueabi/4.4.6
   mkdir tmp && cd tmp && ar xv ../libgcc_eh.a && ar rv ../libgcc.a *.o && cd .. && rm -rf tmp

Do not remove gcc_eh! binutils needs it! It should contain the following
objects : emutls.o libunwind.o pr-support.o unwind-arm.o unwind-c.o.


------------------

Move uclibc root to arch/arm-flx-linux-gnueabi/arm-flx-linux-gnueabi/uclibc-root/
so that it is next to debug-root and sys-root and is easier to find from uclibc.

------------------

Nginx definitely fails on ARM/EABI with many many crashes. It also wrongly detects a
big endian system. It is said that versions above 0.8.30 do support ARM thanks to
atomicops fixes. But cross-compile is not the default there and is a real pain to
get to work.

--------------
Version naming scheme : binaries must hold the version number otherwise
we need to rely on PATH !

-----------------------------

Issue : libgcc_s must be dynamic : if libgcc_s.a points to libgcc.a, then some progs
don't build due to undefined reference to __aeabi_unwind_cpp_pr0.
=> rebuild only libgcc_s.a by merging libgcc.a and libgcc_eh.a :

   cd /build/toolchain-2.0/platform/arm-gcc43-gl29-bu219-eabi/lib/gcc/arm*gnueabi/4.3.6
   mkdir tmp && cd tmp && ar xv ../libgcc_eh.a && ar xv ../libgcc.a && ar rv ../libgcc_s.a *.o && cd .. && rm -rf tmp

=> still works this way.

----------------

Note: nginx grows by 8kB by statically linking with libgcc_s.a. Libgcc_s.so is 175 kB.
=> maybe worth to add the dynamic lib.


validated:
	- gcc 4.3.6
	- glibc 2.9
	- glibc-ports 2.9
	- binutils 2.19.1a
	- kernel 2.6.35 or 3.0
	- uclibc-0.9.32
	- no forced unwinding

--------------------------

The bug is that armv5t must be used instead of armv5te, so that ldrd/strd
instructions are not emitted. It is possible that this is a gcc bug in the
register choice, but it may be an issue with the CPU. Still, the feroceon
is supposed to be armv5te.

armv5te:
    192c:       e0623003        rsb     r3, r2, r3
    1930:       e5813010        str     r3, [r1, #16]
    1934:       e594303c        ldr     r3, [r4, #60]
    1938:       e3530000        cmp     r3, #0  ; 0x0
    193c:       15941198        ldrne   r1, [r4, #408]
    1940:       11c325d0        ldrdne  r2, [r3, #80]
    1944:       11c121f8        strdne  r2, [r1, #24]
    1948:       e1a00006        mov     r0, r6
    194c:       e1a01005        mov     r1, r5
    1950:       e1a0e00f        mov     lr, pc

armv5t:
    1934:       e0623003        rsb     r3, r2, r3
    1938:       e5813010        str     r3, [r1, #16]
    193c:       e595303c        ldr     r3, [r5, #60]
    1940:       e3530000        cmp     r3, #0  ; 0x0
    1944:       15952198        ldrne   r2, [r5, #408]
    1948:       12833050        addne   r3, r3, #80     ; 0x50
    194c:       18930018        ldmne   r3, {r3, r4}
    1950:       15823018        strne   r3, [r2, #24]
    1954:       1582401c        strne   r4, [r2, #28]
    1958:       e1a00007        mov     r0, r7
    195c:       e1a01006        mov     r1, r6
    1960:       e1a0e00f        mov     lr, pc

--------------------
gcc 4.3 and 4.4 happily reorder asm() blocks :

example 1 :
	unsigned int y;
	__attribute__((noinline)) unsigned int test(unsigned int x)
	{
		unsigned int ret;
		y = x;

		asm ("ldr %0, [%1]\n\t"
		    : "=r" (ret)
		    : "r" (&y)
		    );

		return ret;
	}

example 2 :
	unsigned int y;
	__attribute__((noinline)) unsigned int test(unsigned int x)
	{
		unsigned int ret;
		y = x;

		asm volatile("ldr %0, [%1]\n\t"
		    : "=r" (ret)
		    : "r" (&y)
		    );

		return ret;
	}

In example 1, the code is wrong, the asm is emitted before assigning x to y :

000083e0 <test>:
    83e0:       e59f300c        ldr     r3, [pc, #12]   ; 83f4 <test+0x14>
    83e4:       e5932000        ldr     r2, [r3]
    83e8:       e5830000        str     r0, [r3]
    83ec:       e1a00002        mov     r0, r2
    83f0:       e12fff1e        bx      lr
    83f4:       00010678        .word   0x00010678

in example 2, it's OK :

000083e0 <test>:
    83e0:       e59f3008        ldr     r3, [pc, #8]    ; 83f0 <test+0x10>
    83e4:       e5830000        str     r0, [r3]
    83e8:       e5930000        ldr     r0, [r3]
    83ec:       e12fff1e        bx      lr
    83f0:       00010674        .word   0x00010674

----------------------
gcc 4.3.6 and 4.4.6 bug on long long :

x is never assigned to y below, so the result returns random stack
contents instead of lo(x)+hi(x) :

	__attribute__((noinline)) unsigned int testll(unsigned long long x)
	{
		unsigned int ret;
		unsigned long long y = x;

		asm volatile("ldr r3, [%1,#4]\n\t"
		    "ldr r2, [%1]\n\t"
		    "add %0, r2, r3\n\t"
		    : "=r" (ret)
		    : "r" (&y)
		    : "r2", "r3"
		    );

		return ret;
	}

	000083c4 <testll>:
	    83c4:       e24dd008        sub     sp, sp, #8      ; 0x8
	    83c8:       e1a0000d        mov     r0, sp
	    83cc:       e5903004        ldr     r3, [r0, #4]
	    83d0:       e5902000        ldr     r2, [r0]
	    83d4:       e0820003        add     r0, r2, r3
	    83d8:       e28dd008        add     sp, sp, #8      ; 0x8
	    83dc:       e12fff1e        bx      lr

by declaring y volatile, it's OK and the code works :

	__attribute__((noinline)) unsigned int testll(unsigned long long x)
	{
		unsigned int ret;
		volatile unsigned long long y = x;

		asm volatile("ldr r3, [%1,#4]\n\t"
		    "ldr r2, [%1]\n\t"
		    "add %0, r2, r3\n\t"
		    : "=r" (ret)
		    : "r" (&y)
		    : "r2", "r3"
		    );

		return ret;
	}


	000083c4 <testll>:
	    83c4:       e24dd008        sub     sp, sp, #8      ; 0x8
	    83c8:       e28dc008        add     ip, sp, #8      ; 0x8
	    83cc:       e16c00f8        strd    r0, [ip, #-8]!
	    83d0:       e59c3004        ldr     r3, [ip, #4]
	    83d4:       e59c2000        ldr     r2, [ip]
	    83d8:       e0820003        add     r0, r2, r3
	    83dc:       e28dd008        add     sp, sp, #8      ; 0x8
	    83e0:       e12fff1e        bx      lr

--------------------------------------

gcc bug most obvious with nginx :

ngx_http_write_filter_module.c:153 does :

        size += ngx_buf_size(cl->buf);

when compiled in debug mode, it's visible that size is sometimes composed of
the lower 32 bits of the size and crap in the higher 32 bits. Building with
armv5t instead of 5te makes the problem vanish.

2011/10/26 23:53:38 [debug] 3817#0: *1 http write filter: size:287
2011/10/26 23:53:38 [debug] 3817#0: *1 http write filter: l:1 f:0 s:3397319131423

   3397319131423 = 0x3170000011f = 287 + (0x317 << 32)


153:	ngx_log_debug3(NGX_LOG_DEBUG_HTTP, c->log, 0,
		       "http write filter: size:%O", size);

        size += ngx_buf_size(cl->buf);

        if (cl->buf->flush || cl->buf->recycled) {
            flush = 1;
        }

        if (cl->buf->last_buf) {
            last = 1;
        }
    }

    *ll = NULL;

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "http write filter: l:%d f:%d s:%O", last, flush, size);

==> size was added the bad value during the += operation.

#define ngx_buf_size(b)                                                      \
    (ngx_buf_in_memory(b) ? (off_t) (b->last - b->pos):                      \
                            (b->file_last - b->file_pos))

struct ngx_buf_s {
    u_char          *pos;
    u_char          *last;
    off_t            file_pos;
    off_t            file_last;
    ...
}


----------  2 different bugs ------------------

1) garbage at the end of pages => due to compression : "gzip on", regardless
   of nginx build options => maybe in zlib ?
   => indeed, zlib contains some strd and ldrd !

2) crashes etc... => only in -march=armv5te
   The difference occurs with objs/src/http/ngx_http_upstream.o

   A few places make use of strd and ldrd. ngx_http_upstream_connect()
   is reponsible for the trouble around line 1090 :

#ifndef BUG
   memset(&u->writer.limit, 0, sizeof(u->writer.limit));   // works!
#else
   u->writer.limit = 0;                                    // BUG !
#endif

The code is almost not different :

                            BUG                                    WORKING

diff1: similar (just swapped)
    4454:  e1a03004  mov     r3, r4            |  4454:  e3a02000  mov     r2, #0  ; 0x0
    4458:  e3a02000  mov     r2, #0  ; 0x0     |  4458:  e1a03004  mov     r3, r4
    445c:  e5a32078  str     r2, [r3, #120]!      445c:  e5a32078  str     r2, [r3, #120]!
    4460:  e584307c  str     r3, [r4, #124]       4460:  e584307c  str     r3, [r4, #124]
    4464:  e5846080  str     r6, [r4, #128]       4464:  e5846080  str     r6, [r4, #128]

diff2: on the right, the zero is stored at r3+=136 then r3+4
    4468:  e3a02000  mov     r2, #0  ; 0x0     |  4468:  e1a03004  mov     r3, r4
    446c:  e3a03000  mov     r3, #0  ; 0x0     |  446c:  e5a32088  str     r2, [r3, #136]!
    4470:  e1c428f8  strd    r2, [r4, #136]    |  4470:  e5832004  str     r2, [r3, #4]
    4474:  e5d431b8  ldrb    r3, [r4, #440]       4474:  e5d431b8  ldrb    r3, [r4, #440]

==> problem: strd performed on an unaligned address, so the lower word is
    overwritten :

    offset + 0 : ptr
    offset + 4 : data[0..31]
    offset + 8 : data[32..63]

When strd[offset+4] is performed, the effective address used is [(offset+4) & -8].
We need the kernel to perform a fixup for us :
   echo 1 > /proc/cpu/alignment    (warn only)
   echo 2 > /proc/cpu/alignment    (silent fixup)
   echo 3 > /proc/cpu/alignment    (fixup + warn)

#define UM_WARN         (1 << 0)
#define UM_FIXUP        (1 << 1)
#define UM_SIGNAL       (1 << 2)

=> and the gzip issue is gone too !

=> apply the ai_usermode patch to set it to 3 by default.

