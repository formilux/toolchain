#!/bin/bash

MYSELF=$( readlink -f ${BASH_SOURCE[0]} )
TC_DIR="${TC_DIR-${MYSELF%/*}}"

# source files and tarballs are found by default in the toolchain's "src/" dir.
TC_SRC="${TC_SRC-$TC_DIR/src}"

# WARNING! need about 2GB per toolchain in $TC_TMP !
TC_DST="${TC_DST-$HOME/flx-tc}"
TC_TMP="${TC_TMP-/tmp}"

# If set, then the toolchains will be chowned/chgrped to these respective user
# and group name/id.
TC_USR="${TC_USR-}"
TC_GRP="${TC_GRP-}"

# If set, forces the host tuple to use to build a canadian cross compiler
TC_HOST="${TC_HOST-}"
TC_HOST_CFLAGS="${TC_HOST_CFLAGS-}"

# If set, forces the build tuple to use for the local system
TC_BUILD="${TC_BUILD-}"

# NOTE: If a variable V is set, it is passed to most makefiles (use V=1 for more verbosity)

# Build directory for various steps, may be totally removed at any time
BUILD="${BUILD-$TC_TMP/flx}"
# Directory location where final config files will be stored.
TC_CFG="${TC_CFG-$TC_DST/config}"

# When multiple uclibc configs are available, the following variable tells
# which version is preferred (eg: 0.9.28.3). It's also possible to pass
# "none" indicating that we purposely don't want to build uclibc.
UCLIBC_PREFERRED_VERSION="${UCLIBC_PREFERRED_VERSION-}"

# Warning: using an improper crosstool-ng version can result in losing some
# settings.
CT_DEFAULT_VERSION="${CT_VERSION-1.19.0}"

# Path to the "make" utility. Some tools only build with older versions
# (<= 3.81), and other ones only build with >= 3.82 (eg: uClibc-0.9.33.2).
MAKE="${MAKE-make}"

# Path to the "ar" and "ranlib" utilities.
AR="${AR-ar}"
RANLIB="${RANLIB-ranlib}"

## patches to apply on top of uclibc
#UCLIBC_PATCHES="uclibc-arm-no-asm-page.diff uclibc-armv5te.diff"

##### a few functions

die() {
	echo "Critical error${2+ : $2}" >&2
	exit ${1:-1}
}

# report usage with an optional preliminary error line in $1. Exits with zero
# if no error was given, or 1 if an error was present.
usage() {
	[ -n "$1" ] && echo "Error: $1."
	echo "Usage: ${MYSELF##*/} <actions> [ config file ... ]"
	echo
	echo "<actions> is a comma-delimited list of actions or meta-actions to execute in"
	echo "sequence. If an action is prefixed with '-', it will be removed from all"
	echo "previously expanded actions (eg: 'all,-ct-clean'). Actions and meta actions"
	echo "are listed below, with meta-actions tagged with '*' :"
	echo
	echo "    help         display this help page and exit"
	echo "    show         show expanded list of following actions (eg: show,all) and exit"
	echo "    env          show environment variables and current settings"
	echo "  * all          prepare crosstool-ng and tools, and build all toolchains"
	echo "    ct-extract   extract crosstool-ng"
	echo "    ct-patch     patch crosstool-ng"
	echo "    ct-build     build crosstool-ng"
	echo "    ct-install   install crosstool-ng"
	echo "  * ct-all       all previous ct-* steps"
	echo "    ct-clean     remove crosstool-ng"
	echo "    tc-check     check toolchain configs"
	echo "    uc-check     check for presence of associated uclibc configs"
	echo "    cfg-info     report important information gathered from config files"
	echo "    src-check    perform a very basic source availability check"
	echo "    tc-init      copy config files to destination and fail on conflict"
	echo "    tc-cond-init copy config files to destination only if not there"
	echo "    tc-refresh   refresh destination config files (ct-ng oldconfig)"
	echo "    tc-config    review destination config files (ct-ng menuconfig)"
	echo "    tc-build     build toolchains based on destination config files"
	echo "    tc-restart   restart a failed build from step \$RESTART"
	echo "    tc-finish    finish toolchain installation (perms, static libgcc, ...)"
	echo "    tc-sysroot   build the toolchains sysroot archives"
	echo "  * tc-all       tc-cond-init, tc-refresh, tc-build, tc-finish, tc-sysroot"
	echo "    uc-build     build uclibc for toolchains based on destination config files"
	echo
	echo "Environment variables :"
	echo "   RESTART  = crosstool-ng step to restart from with tc-restart"
	echo "   PARALLEL = number of parallel jobs to run for tc-build and tc-restart"
	echo
	test -z "$1"
	exit $?
}

show_env() {
	echo "------------------------- Directories and permissions -------------------------"
	echo "Current directory                    (PWD) : ${PWD}"
	echo "Toolchain directory               (TC_DIR) : ${TC_DIR}"
	echo "Source files and tarballs         (TC_SRC) : ${TC_SRC}"
	echo "Temporary directory base          (TC_TMP) : ${TC_TMP}"
	echo "  Build directory >= 2GB           (BUILD) : ${BUILD}"
	echo "Installation directory            (TC_DST) : ${TC_DST}"
	echo "  Final location for config files (TC_CFG) : ${TC_CFG}"
	echo "Target user ID                    (TC_USR) : ${TC_USR:-<default>}"
	echo "Target group ID                   (TC_GRP) : ${TC_GRP:-<default>}"
	echo
	echo "------------------------------ Tools and versions -----------------------------"
	echo "Crosstool-NG default version           (CT_VERSION) : ${CT_DEFAULT_VERSION}"
	echo "uClibc preferred version (UCLIBC_PREFERRED_VERSION) : ${UCLIBC_PREFERRED_VERSION:-<auto>}"
	echo "Path to the make utility                     (MAKE) : ${MAKE}"
	echo "Parallel builds                          (PARALLEL) : ${PARALLEL:-<unset>}"
	echo "Verbosity level [none,1,2]                      (V) : ${V}"
}

# check for availability of a source file matching "$1" with a variety of
# extensions and returns the first match in $REPLY with status 0. If none is
# found, 1 is returned.
get_src_path() {
	local ext
	for ext in "" .tar .tar.gz .tgz .tar.bz2 .tbz .tar.xz .txz; do
		REPLY="$TC_SRC/${1}${ext}"
		[ -s "$REPLY" ] && return 0
	done
	return 1
}

# check for availability of a source file matching "$1" with a variety of
# extensions and returns the first match in $REPLY with status 0. If none is
# found, die with an error.
get_src_path_safe() {
	get_src_path "$1" && return 0
	die 1 "no source file found in $TC_SRC for '${1}'"
}

# retrieves config name $1 (regex) from file $2 an returns it unquoted into
# $REPLY. For easier handling, returns zero only if REPLY equals "y".
get_config_var() {
	[ "$#" = 2 ] || die 1 "get_config_var: incorrect number of args ($#): $*"
	[ -f "$2" ] || die 1 "get_config_var: cannot retrieve var $1 from $2 (no such file)"
	REPLY=$(grep "^$1=" "$2")
	REPLY="${REPLY#*=}"
	REPLY="${REPLY#\"}"
	REPLY="${REPLY%\"}"
	test "$REPLY" = y
}

# retrieves the crosstool-NG version which was used to produce config file $1,
# and returns it into CT_VERSION. This works for at least ct-ng 1.7.0 to 1.13.0.
# If no version is found, we default to version $CT_DEFAULT_VERSION. If it is
# not set, then abort.
set_ctng_version() {
	[ "$#" = 1 ] || die 1 "get_ctng_config_version: need exactly one config file name"
	[ -f "$1" ] || die 1 "get_ctng_config_version: cannot retrieve config version from $1 (no such file)"
	CT_VERSION_TMP=$(sed -ne 's/^# crosstool-NG version: \([^ ]*\)$/\1/p' \
	                 -ne 's/^# crosstool-NG \([^ ]*\) Configuration/\1/p' "$1" 2>/dev/null)
	if [ "$CT_VERSION_TMP" == "UNKNOWN" ]; then
		# this happens for git ctng
		CT_VERSION_TMP="$CT_DEFAULT_VERSION"
		if [ -z "$CT_VERSION_TMP" ]; then CT_VERSION_TMP="$CT_VERSION"; fi
	else
		CT_VERSION_TMP=${CT_VERSION_TMP:-$CT_DEFAULT_VERSION}
	fi
	if [ -z "$CT_VERSION_TMP" ]; then die 1 "No version found in config file $1, please force it using CT_DEFAULT_VERSION"
	else CT_VERSION="$CT_VERSION_TMP"; fi
}

########## functions used to build and install ct-ng ###########

# note that CT_VERSION *must* be set prior to calling these functions
ct_ng_extract() {
	local p="$PWD"

	[ -n "$CT_VERSION" ] || die 1 "CT_VERSION not set, must match desired crosstool-ng version"
	mkdir -p "$BUILD" && cd "$BUILD" || die $?
	rm -rf "crosstool-ng-$CT_VERSION" || die $?
	get_src_path_safe "crosstool-ng-$CT_VERSION"
	echo "Extracting $REPLY ..."
	tar xf "$REPLY" || die $?

	cd "$BUILD/crosstool-ng-$CT_VERSION" || die 1 "crosstool-ng-$CT_VERSION was not properly extracted"
	cd ..
	touch "crosstool-ng-$CT_VERSION/.ct_ng_extract"
	cd "$p" || die $?
}

ct_ng_patch() {
	local p="$PWD"

	[ -n "$CT_VERSION" ] || die 1 "CT_VERSION not set, must match desired crosstool-ng version"
	if [ ! -e "$BUILD/crosstool-ng-$CT_VERSION/.ct_ng_patch" ]; then
		echo "crosstool-ng-$CT_VERSION not extracted yet, doing it now..."
		ct_ng_extract
	fi
	cd "$BUILD/crosstool-ng-$CT_VERSION" || die 1 "crosstool-ng-$CT_VERSION was not properly extracted"
	if [ -d "$TC_DIR/patches/ct-ng/fixes/$CT_VERSION/." ]; then
		for i in "$TC_DIR/patches/ct-ng/fixes/$CT_VERSION/"*; do
			echo "Applying patch $i"
			patch -p1 < "$i"|| die $?
		done
	fi

	if [ -s "$TC_DIR/patches/ct-ng/to-remove" ]; then
		for i in $(cat "$TC_DIR/patches/ct-ng/to-remove"); do
			rm -vf patches/$i || die $?
		done
	fi

	cp -rL "$TC_DIR/patches/ct-ng/patches/." patches/ || die $?
	touch .ct_ng_patch

	cd "$p" || die $?
}

ct_ng_build() {
	local p="$PWD"
	local bashver

	# ct-ng requires a bash 3.1 or later but does not really test it before crashing
	BASH=${BASH:-$(which bash)}
	[ -z "${BASH##/*}" ] || die 1 "bash not found, please re-run this script with it"

	bashver=$("$BASH" -c 'echo ${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}')
	case "$bashver" in
	    3.[12]*|[4-9]*|[1-9][0-9]*) : ;;
	    *) die 1 "bash version $bashver is too old, 3.1 minimum is required by crosstool-ng. Re-run this script from a more recent version" ;;
	esac

	[ -n "$CT_VERSION" ] || die 1 "CT_VERSION not set, must match desired crosstool-ng version"
	if [ ! -e "$BUILD/crosstool-ng-$CT_VERSION/.ct_ng_patch" ]; then
		echo "crosstool-ng-$CT_VERSION not patched yet, doing it now..."
		ct_ng_patch
	fi
	cd "$BUILD/crosstool-ng-$CT_VERSION" || die 1 "crosstool-ng-$CT_VERSION was not properly extracted"

	if ! [ -f ./configure ] && [ -f ./bootstrap ]; then
		# the boostrap has to be done after applying the patches, before building
		echo "This is a git version, boostrapping it"
		./bootstrap
	fi

	if grep -q 'with-bash.*deprecated' ./configure; then
		if [ -z "$BASH" ]; then BASH=`which bash`; fi
		BASH_SHELL="$BASH" ./configure --prefix="$BUILD/ct-ng-$CT_VERSION" || die $?
	else
		./configure --prefix="$BUILD/ct-ng-$CT_VERSION" ${BASH:+--with-bash="$BASH"} || die $?
	fi
	${MAKE} ${V+V="$V"} || die $?
	touch .ct_ng_build
	cd "$p" || die $?
}

ct_ng_install() {
	local p="$PWD"

	[ -n "$CT_VERSION" ] || die 1 "CT_VERSION not set, must match desired crosstool-ng version"
	rm -rf "$BUILD/ct-ng-$CT_VERSION"
	if [ ! -e "$BUILD/crosstool-ng-$CT_VERSION/.ct_ng_build" ]; then
		echo "crosstool-ng-$CT_VERSION not built yet, doing it now..."
		ct_ng_build
	fi
	cd "$BUILD/crosstool-ng-$CT_VERSION" || die 1 "crosstool-ng-$CT_VERSION was not properly built"
	${MAKE} ${V+V="$V"} install || die $?
	touch .ct_ng_install
	echo "## crosstool-NG-$CT_VERSION was successfully installed in $BUILD/ct-ng-$CT_VERSION".
	cd ..
	rm -rf "crosstool-ng-$CT_VERSION"
	cd "$p" || die $?
}

ct_ng_clean() {
	[ -n "$CT_VERSION" ] || die 1 "CT_VERSION not set, must match desired crosstool-ng version"
	echo "Removing ct-ng from temp directory $BUILD..."
	rm -rf "$BUILD/ct-ng-$CT_VERSION"
	echo "done."
}


########## functions used to manipulate toolchain config files ###########

# sets ARCH, ARCHIS64, FAMILY, CC_VERSION, CC_BRANCH, LIBC_VERSION, LIBC_BRANCH,
# BINUTILS_VERSION, VENDOR, ABI and PREF from a ct-ng config file whose name is
# in $1.
tc_set_names() {
	local b64 ARCHSFX

	ABI=""
	get_config_var "CT_CC_VERSION"       "$1" ; CC_VERSION="$REPLY"
	if [ -z "$CC_VERSION" ]; then
	    get_config_var "CT_GCC_VERSION"       "$1" ; CC_VERSION="$REPLY"
	fi
	get_config_var "CT_LIBC_VERSION"     "$1" ; LIBC_VERSION="$REPLY"
	if [ -z "$LIBC_VERSION" ]; then
	    get_config_var "CT_GLIBC_VERSION"     "$1" ; LIBC_VERSION="$REPLY"
	fi
	get_config_var "CT_ARCH"             "$1" ; FAMILY="$REPLY"
	get_config_var "CT_ARCH_OVERRIDE"    "$1" ; ALIAS="$REPLY"
	get_config_var "CT_ARCH_SUFFIX"      "$1" ; ARCHSFX="$REPLY"
	get_config_var "CT_ARCH_64"          "$1" ; ARCHIS64="$REPLY"
	get_config_var "CT_BINUTILS_VERSION" "$1" ; BINUTILS_VERSION="$REPLY"
	get_config_var "CT_KERNEL_VERSION"   "$1" ; KERNEL_VERSION="$REPLY"
	if [ -z "$KERNEL_VERSION" ]; then
	    get_config_var "CT_LINUX_VERSION"       "$1" ; KERNEL_VERSION="$REPLY"
	fi
	get_config_var "CT_TARGET_VENDOR"    "$1" ; VENDOR="$REPLY"
	get_config_var "CT_ARCH_.*_EABI"     "$1" && ABI="eabi"

	CC_BRANCH="${CC_VERSION#*.*.}" ; CC_BRANCH="${CC_VERSION%.$CC_BRANCH}"
	LIBC_BRANCH="${LIBC_VERSION#*.*.}" ; LIBC_BRANCH="${LIBC_VERSION%.$LIBC_BRANCH}"

	# compute ARCH from FAMILY, ARCHIS64, and CT_ARCH_ARCH
	if [ "$FAMILY" = x86 ]; then
		if [ "$ARCHIS64" = y ]; then
			ARCH=x86_64
		else
		    	get_config_var "CT_ARCH_ARCH" "$1"
			if [ -n "$REPLY" ]; then
				ARCH="$REPLY"
			else
				ARCH="i386"
			fi
		fi
	else
		# some archs exist in both endianess, some of them default
		# to big, other ones to little.

		ARCH="$FAMILY"
		if get_config_var "CT_ARCH_SUPPORTS_BOTH_ENDIAN" "$1"; then
			case "$ARCH" in
			arm)   get_config_var "CT_ARCH_BE" "$1" && ARCH="${ARCH}eb" ;;
			mips)  get_config_var "CT_ARCH_LE" "$1" && ARCH="${ARCH}el" ;;
			esac
		fi

		# some archs have "64" appended to their name for 64-bit variants
		# (eg: sparc4, mips64, ppc64). ARM64 is called "aarch64".
		if [ "$ARCHIS64" = y ]; then
			case "$ARCH" in
			arm)           ARCH="aarch64"   ;;
			*)             ARCH="${ARCH}64" ;;
			esac
		fi
	fi

	# x86: 32b: CT_ARCH_ARCH="", "i586" | 64b: CT_ARCH_ARCH=""
	if [ -z "$VENDOR" ]; then
		VENDOR="gcc${CC_BRANCH%.*}${CC_BRANCH#*.}_glibc${LIBC_BRANCH%.*}${LIBC_BRANCH#*.}"
	fi
	ALIAS="${ALIAS:-${ARCH}${ARCHSFX}}"
	PREF="${ALIAS}-$VENDOR-linux-gnu${ABI}"
}

# displays information on the currently loaded ct-ng settings
show_ct_settings() {
	echo "  [ mandatory ]  FAMILY=$FAMILY"
	echo "  [ mandatory ]  ARCH=$ARCH"
	echo "  [ mandatory ]  CC_BRANCH=$CC_BRANCH"
	echo "  [ mandatory ]  CC_VERSION=$CC_VERSION"
	echo "  [ mandatory ]  LIBC_BRANCH=$LIBC_BRANCH"
	echo "  [ mandatory ]  LIBC_VERSION=$LIBC_VERSION"
	echo "  [ mandatory ]  BINUTILS_VERSION=$BINUTILS_VERSION"
	echo "  [ mandatory ]  KERNEL_VERSION=$KERNEL_VERSION"
	echo "  [ optional  ]  ALIAS=$ALIAS"
	echo "  [ optional  ]  VENDOR=$VENDOR"
	echo "  [ optional  ]  ARCHIS64=$ARCHIS64"
	echo "  [ optional  ]  ABI=$ABI"
	echo "  [ computed  ]  PREF=$PREF"
}

# Check that all of the config files passed in arguments look right.
tc_check_configs() {
	local file

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	for file in "$@"; do
		[ -e "$file" ] || die 1 "config file $file does not exist"
		[ -f "$file" ] || die 1 "config file $file is not a regular file"
		[ -r "$file" ] || die 1 "config file $file is unreadable"
		[ -s "$file" ] || die 1 "config file $file is empty"
		tc_set_names "$file"
		if [ -z "$FAMILY" -o -z "$ARCH" -o -z "$CC_VERSION" -o \
		     -z "$LIBC_VERSION" -o -z "$VENDOR" -o -z "$PREF" ]; then
			echo "Some settings are wrong or missing with config file $file :"
			show_ct_settings
			die 1 "check arguments and/or config files."
		fi
	done
	return 0
}

# Extracts uclibc version number from file name $1 and sets UCLIBC_VERSION
# accordingly. The file name should be in the form /path/uclibc-$VER-anything.
# Passing "none" will properly result in "none" being used for UCLIBC_VERSION.
set_uclibc_version() {
	UCLIBC_VERSION="${1##*/}"
	UCLIBC_VERSION="${UCLIBC_VERSION#uclibc-}"
	UCLIBC_VERSION="${UCLIBC_VERSION%%-*}"
}

# Given a ct config file, report in $UCLIBC_FILE what looks like the best uclibc
# config file match or an empty string. Returns 0 only if an exact match is
# found. If a file matches, its name is returned in UCLIBC_FILE, the required uclibc
# version is set in UCLIBC_VERSION, and zero is returned. Otherwise, all matches
# (possibly none) are returned in UCLIBC_FILE and the result is non-zero. If the
# preferred version is set to "none", it will be propagated to the file and to the
# version.
uc_find_best_match() {
	local file="$1"
	local dir

	UCLIBC_VERSION=""
	tc_set_names "$file"
	[ -n "${file##*/*}" ] && dir="." || dir="${file%/*}"

	if [ "$UCLIBC_PREFERRED_VERSION" = "none" ]; then
		UCLIBC_FILE="none"
		UCLIBC_VERSION="none"
		return 0
	elif [ -n "$UCLIBC_PREFERRED_VERSION" ]; then
		UCLIBC_FILE="${dir}/uclibc-${UCLIBC_PREFERRED_VERSION}-${ALIAS}${ABI}"
		if [ -e "$UCLIBC_FILE" ]; then
			set_uclibc_version "$UCLIBC_FILE"
			return 0
		fi
		UCLIBC_FILE="$(echo ${dir}/uclibc-${UCLIBC_PREFERRED_VERSION}-*-${ALIAS}${ABI})"
		if [ -n "$UCLIBC_FILE" -a -n "${UCLIBC_FILE##*\**}" ]; then
			if [ -z "${UCLIBC_FILE##* *}" ]; then
			# No exact uclibc match for config file $file and multiple candidates found : $UCLIBC_FILE
				return 1
			fi
			set_uclibc_version "$UCLIBC_FILE"
			return 0
		fi
	fi

	UCLIBC_FILE="$(echo ${dir}/uclibc-*-${ALIAS}${ABI})"
	if [ -n "$UCLIBC_FILE" -a -n "${UCLIBC_FILE##*\**}" ]; then
		if [ -z "${UCLIBC_FILE##* *}" ]; then
			# No exact uclibc match for config file $file and multiple candidates found : $UCLIBC_FILE
			return 1
		fi
		set_uclibc_version "$UCLIBC_FILE"
		return 0
	fi
	# No exact uclibc match for config file $file
	UCLIBC_FILE=""
	return 1
}

# Check that all of the config files passed in arguments have a pending uclibc
# config file in the same directory. The config files are assumed to have already
# been checked for correctness. When the version is set to "none", the configs
# are silently ignored.
uc_check_configs() {
	local file

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	for file in "$@"; do
		if ! uc_find_best_match "$file"; then
			if [ -z "$UCLIBC_FILE" ]; then
				die 1 "No uclibc match found for config file $file (want 'uclibc-<something>-${ALIAS}${ABI}')."
			else
				die 1 "Multiple candidates found for config file $file : $UCLIBC_FILE. You may consider setting the preferred one with UCLIBC_PREFERRED_VERSION."
			fi
		fi

		err=""
		if [ "$UCLIBC_FILE" = "none" ]; then
			:
		elif [ ! -e "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE does not exist"
		elif [ ! -f "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE is not a regular file"
		elif [ ! -r "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE is unreadable"
		elif [ ! -s "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE is empty"
		fi
		if [ -n "$err" ]; then
			echo "Failed to find a suitable uclibc config file for this toolchain :"
			echo "    file=$file"
			show_ct_settings
			echo "$err"
			die 1 "check config file names."
		fi
	done
	return 0
}

# reports information about all configuration files.
cfg_info() {
	local config

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		[ -n "$V" ] && echo "Checking configuration file $config ..."
		uc_find_best_match "$config"
		show_ct_settings
		echo "    UCLIBC_FILE=$UCLIBC_FILE"
		echo "    UCLIBC_VERSION=$UCLIBC_VERSION"
	done
}



########## functions acting on source files ###########

# check source 
src_check() {
	local config file err

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		[ -n "$V" ] && echo "Checking source dependencies for config file $config ..."
		uc_find_best_match "$config"
		for file in "gcc-$CC_VERSION" "glibc-$LIBC_VERSION" "binutils-$BINUTILS_VERSION" "uClibc-$UCLIBC_VERSION" "${KERNEL_VERSION:+linux-$KERNEL_VERSION}"; do
			if [ "$file" = "uClibc-none" ]; then
				:
			elif ! get_src_path "$file"; then
				echo "$file source is missing from $TC_SRC"
				err=1
			else
				[ -n "$V" ] && echo "  -> found $REPLY"
			fi
		done
	done
	[ -z "$err" ] || die 1 "Some files are missing."
}

# copy configuration files to the destination. Ignore existing files when
# similar, but fail on conflicts.
tc_init() {
	local p="$PWD"
	local config oldpref

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	mkdir -p "$TC_CFG" || die $?
	for config in "$@"; do
		uc_find_best_match "$config"

		if [ ! -s "$TC_CFG/config-$PREF" ]; then
			echo "Copying config file $config to $TC_CFG/config-$PREF ..."
			cp "$config" "$TC_CFG/config-$PREF" || die $?
		elif ! cmp -s "$config" "$TC_CFG/config-$PREF"; then
			die 1 "Error: $TC_CFG/config-$PREF already exists and differs from $config. Please remove it and re-run tc-init, or use tc-cond-init instead to preserve current files"
		fi

		if [ "$UCLIBC_VERSION" = "none" ]; then
			:
		elif [ ! -s "$TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI}" ]; then
			echo "Copying uclibc config file $UCLIBC_FILE to $TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI} ..."
			cp "$UCLIBC_FILE" "$TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI}" || die $?
		elif ! cmp -s "$UCLIBC_FILE" "$TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI}"; then
			die 1 "Error: $TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI} already exists and differs from $UCLIBC_FILE. Please remove it and re-run tc-init, or use tc-cond-init instead to preserve current files"
		fi

		# Now check that there is no conflict in the destination directory.
		# Also, calling tc_check_configs will result in updating all global
		# variables including PREF. This is the right moment to check that
		# they are not changed.
		echo "Validating $TC_CFG/config-$PREF..."
		oldpref="$PREF"
		tc_check_configs "$TC_CFG/config-$PREF"
		if [ "$PREF" != "$oldpref" ]; then
			die 1 "Config file $TC_CFG/config-$oldpref should be renamed config-$PREF as it features different settings."
		fi
		uc_check_configs "$TC_CFG/config-$PREF"
	done
}

# copy configuration files to the destination only when missing. Existing
# destination files are preserved.
tc_cond_init() {
	local p="$PWD"
	local config oldpref

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	mkdir -p "$TC_CFG" || die $?
	for config in "$@"; do
		uc_find_best_match "$config"

		if [ ! -s "$TC_CFG/config-$PREF" ]; then
			echo "Copying config file $config to $TC_CFG/config-$PREF ..."
			cp "$config" "$TC_CFG/config-$PREF" || die $?
		elif ! cmp -s "$config" "$TC_CFG/config-$PREF"; then
			if [ "$config" -nt "$TC_CFG/config-$PREF" ]; then
				die 1 "$config was changed since last update of $TC_CFG/config-$PREF, please fix by hand"
			else
				echo "#### Note: $TC_CFG/config-$PREF differs from $config, don't forget to update last one if everything works."
			fi
		fi

		if [ "$UCLIBC_VERSION" = "none" ]; then
			:
		elif [ ! -s "$TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI}" ]; then
			echo "Copying uclibc config file $UCLIBC_FILE to $TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI} ..."
			cp "$UCLIBC_FILE" "$TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI}" || die $?
		elif ! cmp -s "$UCLIBC_FILE" "$TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI}"; then
			echo "Note: $TC_CFG/uclibc-${UCLIBC_VERSION}-${ALIAS}${ABI} differs from $UCLIBC_FILE."
		fi

		# Now check that there is no conflict in the destination directory.
		# Also, calling tc_check_configs will result in updating all global
		# variables including PREF. This is the right moment to check that
		# they are not changed.
		echo "Validating $TC_CFG/config-$PREF..."
		oldpref="$PREF"
		tc_check_configs "$TC_CFG/config-$PREF"
		if [ "$PREF" != "$oldpref" ]; then
			die 1 "Config file $TC_CFG/config-$oldpref should be renamed config-$PREF as it features different settings."
		fi
		uc_check_configs "$TC_CFG/config-$PREF"
	done
}

# run a "ct-ng oldconfig" on all destination config files. Note that the input
# config files are automatically remapped to their destination counterpart so
# that the input files are never overwritten. The function also supports being
# called with destination files.
tc_refresh() {
	local p="$PWD"
	local in_conf config oldpref

	[ "$#" -gt 0 ] || die 1 "need at least one config file"

	tc_cond_init "$@"
	# now we know that the destination config files exist.

	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		rm -rf "$BUILD/tc-$PREF" || die $? "failed to remove directory '$BUILD/tc-$PREF' (permission issue ?)."
		mkdir -p "$BUILD/tc-$PREF" || die $?

		config="$TC_CFG/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."

		set_ctng_version "$config"
		if [ ! -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ]; then
			echo "ct-ng-$CT_VERSION not installed yet, doing it now..."
			ct_ng_install
			[ -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ] || die 1 "ct-ng-$CT_VERSION install failed, you may want to try 'ct-all' by hand"
		fi

		tc_check_configs "$config"
		uc_check_configs "$config"

		# show config and retrieve mandatory information
		[ -n "$V" ] && cfg_info "$config"

		# fixme: we should copy from an intermediary directory to let the user
		# edit those files.
		cp "$config" "$BUILD/tc-$PREF/.config" || die $?
		sed -i -e "s#\(CT_LOCAL_TARBALLS_DIR=\).*#\1\"${TC_SRC}\"#" "$BUILD/tc-$PREF/.config"
		sed -i -e "s#\(CT_PREFIX_DIR=\).*#\1\"${TC_DST}/${PREF}\"#" "$BUILD/tc-$PREF/.config"
		sed -i -e "s#\(CT_TARGET_VENDOR=\).*#\1\"${VENDOR}\"#" "$BUILD/tc-$PREF/.config"
		sed -i -e "s#\(CT_WORK_DIR=\).*#\1\"${BUILD}\"#" "$BUILD/tc-$PREF/.config"

		#sed -i -e "s#\(CT_CC_VERSION=\).*#\1\"${CC_VERSION}\"#" "$BUILD/tc-$PREF/.config"
		#sed -i -e "s#\(CT_BINUTILS_VERSION=\).*#\1\"${BINUTILS_VERSION}\"#" "$BUILD/tc-$PREF/.config"
		#sed -i -e "s#\(CT_KERNEL_VERSION=\).*#\1\"${KERNEL_VERSION}\"#" "$BUILD/tc-$PREF/.config"
		#sed -i -e "s#\(CT_LIBC_VERSION=\).*#\1\"${LIBC_VERSION}\"#" "$BUILD/tc-$PREF/.config"

		cd "$BUILD/tc-$PREF" || die $?
		"$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" oldconfig || die $?
		cd "$p"

		oldpref="$PREF"
		tc_set_names "$BUILD/tc-$PREF/.config"
		if [ "$PREF" == "$oldpref" ]; then
			echo -n "Updating $config ..."
			cp "$BUILD/tc-$PREF/.config" "$config" || die $?
			echo " done."
		else
			echo "WARNING! some settings have changed which caused the target to change from"
			echo "'$oldpref' to '$PREF'. For this reason,"
			echo "I'm not overwriting the original file. This can happen when using a different"
			echo "version of crosstool-ng from the one used to build the initial file (current"
			echo "version: '$CT_VERSION'). Please see new versions below :"
			echo
			show_ct_settings
			echo
			if [ -s "$TC_CFG/config-$PREF" ]; then
				echo "$TC_CFG/config-$PREF already exists, saving as $TC_CFG/config-$PREF.new."
				echo "Please fix by hand and re-run from this directory's files."
				die 1
			else
				echo "The configuration has been saved as $TC_CFG/config-$PREF."
				echo "Please re-run from this directory's files to avoid any issue."
				die 1
			fi
		fi
		echo "Removing build directory $BUILD/tc-$oldpref ..."
		rm -rf "$BUILD/tc-$oldpref"
		cd "$p"
	done
}

# run a "ct-ng menuconfig" on all destination config files. Note that the input
# config files are automatically remapped to their destination counterpart so
# that the input files are never overwritten. The function also supports being
# called with destination files.
tc_config() {
	local p="$PWD"
	local in_conf config oldpref

	[ "$#" -gt 0 ] || die 1 "need at least one config file"

	tc_cond_init "$@"
	# now we know that the destination config files exist.

	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		rm -rf "$BUILD/tc-$PREF" || die $? "failed to remove directory '$BUILD/tc-$PREF' (permission issue ?)."
		mkdir -p "$BUILD/tc-$PREF" || die $?

		config="$TC_CFG/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."

		set_ctng_version "$config"
		if [ ! -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ]; then
			echo "ct-ng-$CT_VERSION not installed yet, doing it now..."
			ct_ng_install
			[ -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ] || die 1 "ct-ng-$CT_VERSION install failed, you may want to try 'ct-all' by hand."
		fi

		tc_check_configs "$config"
		uc_check_configs "$config"

		# show config and retrieve mandatory information
		[ -n "$V" ] && cfg_info "$config"

		# fixme: we should copy from an intermediary directory to let the user
		# edit those files.
		cp "$config" "$BUILD/tc-$PREF/.config" || die $?
		sed -i -e "s#\(CT_LOCAL_TARBALLS_DIR=\).*#\1\"${TC_SRC}\"#" "$BUILD/tc-$PREF/.config"
		sed -i -e "s#\(CT_PREFIX_DIR=\).*#\1\"${TC_DST}/${PREF}\"#" "$BUILD/tc-$PREF/.config"
		sed -i -e "s#\(CT_TARGET_VENDOR=\).*#\1\"${VENDOR}\"#" "$BUILD/tc-$PREF/.config"
		sed -i -e "s#\(CT_WORK_DIR=\).*#\1\"${BUILD}\"#" "$BUILD/tc-$PREF/.config"

		#sed -i -e "s#\(CT_CC_VERSION=\).*#\1\"${CC_VERSION}\"#" "$BUILD/tc-$PREF/.config"
		#sed -i -e "s#\(CT_BINUTILS_VERSION=\).*#\1\"${BINUTILS_VERSION}\"#" "$BUILD/tc-$PREF/.config"
		#sed -i -e "s#\(CT_KERNEL_VERSION=\).*#\1\"${KERNEL_VERSION}\"#" "$BUILD/tc-$PREF/.config"
		#sed -i -e "s#\(CT_LIBC_VERSION=\).*#\1\"${LIBC_VERSION}\"#" "$BUILD/tc-$PREF/.config"

		cd "$BUILD/tc-$PREF" || die $?
		"$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" menuconfig || die $?
		cd "$p" || die $?

		oldpref="$PREF"
		tc_set_names "$BUILD/tc-$PREF/.config"
		if [ "$PREF" == "$oldpref" ]; then
			echo -n "Updating $config ..."
			cp "$BUILD/tc-$PREF/.config" "$config" || die $?
			echo " done."
		else
			echo "WARNING! some settings have changed which caused the target to change from"
			echo "'$oldpref' to '$PREF'. For this reason,"
			echo "I'm not overwriting the original file. This can happen when using a different"
			echo "version of crosstool-ng from the one used to build the initial file (current"
			echo "version: '$CT_VERSION'). Please see new versions below :"
			echo
			show_ct_settings
			echo
			if [ -s "$TC_CFG/config-$PREF" ]; then
				echo "$TC_CFG/config-$PREF already exists, saving as $TC_CFG/config-$PREF.new."
				echo "Please fix by hand and re-run from this directory's files."
				die 1
			else
				echo "The configuration has been saved as $TC_CFG/config-$PREF."
				echo "Please re-run from this directory's files to avoid any issue."
				die 1
			fi
		fi
		echo "Removing build directory $BUILD/tc-$oldpref ..."
		rm -rf "$BUILD/tc-$oldpref"
	done
	cd "$p"
}

# build all toolchains for configs passed in arguments
tc_build() {
	local p="$PWD"
	local in_conf config cfg_list


	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	# OK, now we know that all $TC_CFG/config-$PREF files are valid and that
	# their uclibc-* counter parts exist too. Let's rebuild the config list
	# from the destination files now.
	cfg_list=( )
	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		config="$TC_CFG/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."
		cfg_list[${#cfg_list[@]}]="$config"

		set_ctng_version "$config"
		if [ ! -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ]; then
			echo "ct-ng-$CT_VERSION not installed yet, doing it now..."
			ct_ng_install
			[ -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ] || die 1 "ct-ng-$CT_VERSION install failed, you may want to try 'ct-all' by hand."
		fi
	done

	yes "" | tc_refresh "${cfg_list[@]}" || die 1 "config inconsistency detected, please run tc-refresh or tc-config first !"
	src_check "${cfg_list[@]}"

	for config in "${cfg_list[@]}"; do
		echo "Building toolchain for configuration file $config ..."
		# show config and retrieve mandatory information
		set_ctng_version "$config"
		cfg_info "$config"

		tc_set_names "$config"
		rm -rf "$BUILD/tc-$PREF" || die $? "failed to remove directory '$BUILD/tc-$PREF' (permission issue ?)."
		mkdir -p "$BUILD/tc-$PREF" || die $?
		cd "$BUILD/tc-$PREF" || die $?
		#echo "Copying source files from $TC_SRC ..."
		#mkdir src && cp "$TC_SRC"/* src/ || die
		#echo "Copying and processing config file from $TC_DIR/config ..."

		# fixme: we should copy from an intermediary directory to let the user
		# edit those files.
		cp "$config" .config || die $?
		sed -i -e "s#\(CT_LOCAL_TARBALLS_DIR=\).*#\1\"${TC_SRC}\"#" .config
		sed -i -e "s#\(CT_PREFIX_DIR=\).*#\1\"${TC_DST}/${PREF}\"#" .config
		sed -i -e "s#\(CT_TARGET_VENDOR=\).*#\1\"${VENDOR}\"#" .config
		sed -i -e "s#\(CT_WORK_DIR=\).*#\1\"${BUILD}\"#" .config

		if [ -n "$TC_BUILD" ]; then
			# force CT_BUILD to match TC_BUILD, and add
			# CT_BUILD_{PREFIX,SUFFIX} if not set
			sed -i -e "/^CT_BUILD=/d" .config
			echo "CT_BUILD=\"$TC_BUILD\"" >> .config

			get_config_var CT_BUILD_PREFIX .config
			[ -n "$REPLY" ] || REPLY="${TC_BUILD}-"
			sed -i -e "/^CT_BUILD_PREFIX=/d" .config
			echo "CT_BUILD_PREFIX=\"$REPLY\"" >> .config

			get_config_var CT_BUILD_SUFFIX .config
			sed -i -e "/^CT_BUILD_SUFFIX=/d" .config
			echo "CT_BUILD_SUFFIX=\"$REPLY\"" >> .config
		fi

		if [ -n "$TC_HOST" ]; then
			sed -i -e "s:\([# ]*\)\(CT_CROSS\)[= ].*:# \2 is not set:" .config
			sed -i -e "s:\([# ]*\)\(CT_CANADIAN\)[= ].*:\2=y:" .config
			sed -i -e "s:\([# ]*\)\(CT_TOOLCHAIN_TYPE\)[= ].*:\2\"canadian\":" .config
			sed -i -e "s:\([# ]*\)\(CT_DEBUG_gdb\)[= ].*:# \2 is not set:" .config
			# force CT_HOST to match TC_HOST, and add
			# CT_HOST_{PREFIX,SUFFIX} if not set
			sed -i -e "/^CT_HOST=/d" .config
			echo "CT_HOST=\"$TC_HOST\"" >> .config

			get_config_var CT_HOST_PREFIX .config
			[ -n "$REPLY" ] || REPLY="${TC_HOST}-"
			sed -i -e "/^CT_HOST_PREFIX=/d" .config
			echo "CT_HOST_PREFIX=\"$REPLY\"" >> .config

			get_config_var CT_HOST_SUFFIX .config
			sed -i -e "/^CT_HOST_SUFFIX=/d" .config
			echo "CT_HOST_SUFFIX=\"$REPLY\"" >> .config

			# update the CT_HOST's cflags if specified
			if [ -n "$TC_HOST_CFLAGS" ]; then
				get_config_var CT_EXTRA_CFLAGS_FOR_HOST .config
				[ -n "$REPLY" ] || REPLY="${TC_HOST_CFLAGS}"
				sed -i -e "/^CT_EXTRA_CFLAGS_FOR_HOST=/d" .config
				echo "CT_EXTRA_CFLAGS_FOR_HOST=\"$REPLY\"" >> .config
			fi
		fi

		#sed -i -e "s#\(CT_CC_VERSION=\).*#\1\"${CC_VERSION}\"#" .config
		#sed -i -e "s#\(CT_BINUTILS_VERSION=\).*#\1\"${BINUTILS_VERSION}\"#" .config
		#sed -i -e "s#\(CT_KERNEL_VERSION=\).*#\1\"${KERNEL_VERSION}\"#" .config
		#sed -i -e "s#\(CT_LIBC_VERSION=\).*#\1\"${LIBC_VERSION}\"#" .config

		"$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" oldconfig

		# fix an obscure bug which happened in crosstool-NG
		if [ -f ${BUILD}/ct-ng-${CT_VERSION}/lib/ct-ng[-.]${CT_VERSION}/scripts/crosstool-NG.sh ]; then
			# this file no longer exist with new ct-ng versions (1.23)
			sed -i -e "s#^\. .*/\.config#. $PWD/.config#" ${BUILD}/ct-ng-${CT_VERSION}/lib/ct-ng[-.]${CT_VERSION}/scripts/crosstool-NG.sh
		fi
		# Build but only pass "V=2" if any verbosity is required, otherwise
		# libgmp will break in the libtool crap with V=0/V=1 due to the ECHO
		# variable being redefined as ":".
		"$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" build${PARALLEL:+.$PARALLEL} ${V+V="2"} || die $?
		echo; echo "# ct-ng build complete for toolchain $PREF.";echo

		echo "Removing build directory $BUILD/tc-$PREF ..."
		rm -rf "$BUILD/tc-$PREF" || die $?
		echo "Removing work directory $BUILD/$PREF ..."
		rm -rf "$BUILD/$PREF" || die $?
	done
	cd "$p" || die $?
}

# restart build of a specific toolchain after an error. It needs a config file
# name, build directory name or a toolchain name to find the directory to restart
# from.
tc_restart() {
	local p="$PWD"

	[ -n "$1" ] || die 1 "must specify a config file, build directory or toolchain prefix name"

	if [ -d "$1/." ]; then
		echo "## Trying to restart build from directory $1 ..."
		[ -s "$1/.config" ] || die 1 "cannot restart, no build currently in progress (no .config file)"
		tc_set_names "$1/.config"
	elif [ -d "$BUILD/tc-$1/." ]; then
		echo "## Trying to restart build from directory $BUILD/tc-$1 ..."
		[ -s "$BUILD/tc-$1/.config" ] || die 1 "cannot restart, no build currently in progress (no .config file)"
		tc_set_names "$BUILD/tc-$1/.config"
	elif [ -s "$1" ]; then
		echo "## Trying to restart build from config file $1 ..."
		tc_set_names "$1"
	fi

	echo "## Using toolchain directory $BUILD/tc-$PREF ..."
	[ -s "$BUILD/tc-$PREF/.config" ] || die 1 "cannot restart, no build currently in progress"

	set_ctng_version "$BUILD/tc-$PREF/.config"
	if [ ! -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ]; then
		echo "ct-ng-$CT_VERSION not installed yet, doing it now..."
		ct_ng_install
		[ -x "$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" ] || die 1 "ct-ng-$CT_VERSION install failed, you may want to try 'ct-all' by hand."
	fi

	[ -n "$RESTART" ] || die 1 "Must set the restart step in the RESTART variable when doing tc-restart. List the steps using $BUILD/ct-ng-$CT_VERSION/bin/ct-ng list-steps"

	cd "$BUILD/tc-$PREF" || die $?
	"$BUILD/ct-ng-$CT_VERSION/bin/ct-ng" build${PARALLEL:+.$PARALLEL} ${V+V="$V"} RESTART="$RESTART" || die $?
	echo; echo "# ct-ng build complete for toolchain $PREF."; echo

	echo "Removing build directory $BUILD/tc-$PREF ..."
	rm -rf "$BUILD/tc-$PREF" || die $?
	cd "$p" || $?
}

# fix permissions, make libgcc_s static, etc.
tc_finish() {
	local p="$PWD"
	local in_conf config cfg_list
	local gcc_dir

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	# OK, now we know that all $TC_CFG/config-$PREF files are valid and that
	# their uclibc-* counter parts exist too. Let's rebuild the config list
	# from the destination files now.
	cfg_list=( )
	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		config="$TC_CFG/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."
		cfg_list[${#cfg_list[@]}]="$config"
	done

	for config in "${cfg_list[@]}"; do
		tc_set_names "$config"
		echo "Fixing permissions in toolchain $PREF ..."
		[ -d "$TC_DST/$PREF/." ] || die 1 "no directory named $TC_DST/$PREF ! Crosstool-ng might have ignored our prefix !"

		# Fix permissions
		chmod -R u+rw,og-w,og+rX "$TC_DST/$PREF" || die $?
		if [ -n "$TC_USR" ]; then
			sudo chown -R "$TC_USR" "$TC_DST/$PREF" || die $?
		fi
		if [ -n "$TC_GRP" ]; then
			sudo chgrp -R "$TC_GRP" "$TC_DST/$PREF" || die $?
		fi

		# We want a static libgcc_s. On some platforms and with certain version of GCC,
		# we also have libgcc_eh.a which contains exception handlers and which are needed
		# in libgcc_s too if static. Thus we rebuild libgcc_s.a from libgcc.a + libgcc_eh.a,
		# and for this we have to extract them both first.

		echo "Making static libgcc for toolchain $PREF (libgcc_s.a) ..."
		for i in "$TC_DST/$PREF/$PREF"/sys-root/lib/libgcc_s.so*; do
			if [ -e "$i" ]; then
				mv "$i" "${i/libgcc_s/.unused.libgcc_s}" || die $?
			fi
		done

		# when the compiler is from a second source (eg: linaro), CC_VERSION
		# does not necessarily reflect the directory name (eg: 4.7.3).
		gcc_dir=$(echo ${TC_DST}/${PREF}/lib/gcc/${PREF}/[1-9]*)
		[ -n "$gcc_dir" ] || die $? "No gcc version found in ${TC_DST}/${PREF}/lib/gcc/${PREF}/"

		if [ ! -s "$gcc_dir"/libgcc_s.a ]; then
			cd "$gcc_dir"/ || die $?
			mkdir tmp && cd tmp || die $?
			if [ -e ../libgcc.a ]; then
				"$AR" x ../libgcc.a || die $?
			fi
			if [ -e ../libgcc_eh.a ]; then
				"$AR" x ../libgcc_eh.a || die $?
			fi
			"$AR" r ../libgcc_s.a *.o || die $?
			"$RANLIB" ../libgcc_s.a || die $?
			cd .. && rm -rf tmp || die $?
		fi

		# If we have libstdc++.so, it likely depends on libgcc_s.so, so we'll rename it
		# too so that we only keep libstdc++.a. Note that we must also remove the .la
		# otherwise some libtool-based builds will fail.

		if [ -e "$TC_DST/$PREF/$PREF"/sys-root/lib/libstdc++.so ]; then
			echo "Disabling shared libstdc++ for toolchain $PREF (libstdc++.so) ..."
			mv "$TC_DST/$PREF/$PREF"/sys-root/lib/{,.unused.}libstdc++.so || die $?
			if [ -e "$TC_DST/$PREF/$PREF"/sys-root/lib/libstdc++.la ]; then
				echo "  (Disabling libstdc++.la as well) ..."
				mv "$TC_DST/$PREF/$PREF"/sys-root/lib/{,.unused.}libstdc++.la || die $?
			fi
		fi

		echo "Listing glibc patches applied to toolchain $PREF (version $LIBC_VERSION)..."
		for i in "$BUILD/ct-ng-$CT_VERSION/lib/ct-ng.$CT_VERSION/patches/glibc/$LIBC_VERSION"/*; do
			if [ -s "$i" ]; then
				echo "${i##*/}"
			fi
		done > "$TC_DST/$PREF/.glibc-patches"
	done
	cd "$p" || $?
}

# package the sysroots for the specified toolchains
tc_sysroot() {
	local p="$PWD"
	local in_conf config cfg_list

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	# OK, now we know that all $TC_CFG/config-$PREF files are valid and that
	# their uclibc-* counter parts exist too. Let's rebuild the config list
	# from the destination files now.
	cfg_list=( )
	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		config="$TC_CFG/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."
		cfg_list[${#cfg_list[@]}]="$config"
	done

	for config in "${cfg_list[@]}"; do
		tc_set_names "$config"
		echo "Archiving sysroot in toolchain $PREF ..."
		[ -d "$TC_DST/$PREF/." ] || die 1 "no directory named $TC_DST/$PREF ! Crosstool-ng might have ignored our prefix !"

		cd "$TC_DST/$PREF/$PREF" || die $?
		tar cf - sys-root | gzip -nc9 > "sys-root.tar.gz" || die $?
	done
	cd "$p"
}

uc_build() {
	local p="$PWD"
	local in_conf config cfg_list

	[ "$#" -gt 0 ] || die 1 "need at least one config file"

	tc_cond_init "$@"
	uc_check_configs "$@"

	if [ "$UCLIBC_VERSION" = "none" ]; then
		return 0
	fi

	# OK, now we know that all $TC_CFG/config-$PREF files are valid and that
	# their uclibc-* counter parts exist too. Let's rebuild the config list
	# from the destination files now.
	cfg_list=( )
	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		config="$TC_CFG/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."
		cfg_list[${#cfg_list[@]}]="$config"
	done

	src_check "${cfg_list[@]}"

	mkdir -p "$BUILD" && cd "$BUILD" || die $?

	# note: at this point, the source file necessarily exists
	for config in "${cfg_list[@]}"; do
		[ -n "$V" ] && echo "Building uClibc for config file $config ..."
		tc_set_names "$config"
		uc_find_best_match "$config" || die $?

		cd "$BUILD" || die $?
		rm -rf "uClibc-$UCLIBC_VERSION" || die $?
		get_src_path_safe "uClibc-$UCLIBC_VERSION"
		echo "Extracting $REPLY ..."
		tar xf "$REPLY" || die $?

		cd "uClibc-$UCLIBC_VERSION" || die $?

		if [ -d "$TC_DIR/patches/uclibc/$UCLIBC_VERSION/." ]; then
			for i in "$TC_DIR/patches/uclibc/$UCLIBC_VERSION/"*; do
				echo "Applying patch $i"
				patch -p1 < "$i"|| die $?
			done
		fi

		${MAKE} distclean
		cp "$UCLIBC_FILE" .config || $?
		${MAKE} ${V+V="$V"} oldconfig < /dev/null || die $?
		sed -i -e "s#\(KERNEL_SOURCE=\).*#\1\"${TC_DST}/${PREF}/${PREF}/sys-root/usr\"#"          .config
		sed -i -e "s#\(KERNEL_HEADERS=\).*#\1\"${TC_DST}/${PREF}/${PREF}/sys-root/usr/include\"#" .config
		sed -i -e "s#\(RUNTIME_PREFIX=\).*#\1\"${TC_DST}/${PREF}/${PREF}/uclibc-root\"#"          .config
		sed -i -e "s#\(DEVEL_PREFIX=\).*#\1\"${TC_DST}/${PREF}/${PREF}/uclibc-root/usr\"#"        .config

		# Note: build is entirely done again when installing on newer versions, so it's
		# pointless to run make first (at least on 0.9.3x). However, in 0.9.32, the install
		# fails if the target dir "lib" does not exist.
		if [ -z "${UCLIBC_VERSION##0.9.2*}" ]; then
			# make all is still needed in 0.9.2x
			${MAKE} ${V+V="$V"} CROSS="${TC_DST}/${PREF}/bin/${PREF}-" || die $?
		fi
		mkdir -p "${TC_DST}/${PREF}/${PREF}/uclibc-root/lib" || die $?
		${MAKE} ${V+V="$V"} CROSS="${TC_DST}/${PREF}/bin/${PREF}-" install || die $?
		cd ..
		rm -rf "uClibc-$UCLIBC_VERSION" || die $?
	done

	cd "$p" || die $?

	# install uclibc wrapper
	mkdir -p "$TC_DST/tools/bin" || die $?
	cp "$TC_DIR/add-ons/uclibc" "$TC_DST/tools/bin/" || die $?
}


############################# MAIN ############################

# comma-delimited list of known actions, must start and end with a comma.
valid_actions=",env,help,show,all,ct-extract,ct-patch,ct-build,ct-install,ct-all,ct-clean,tc-check,uc-check,cfg-info,src-check,tc-init,tc-cond-init,tc-refresh,tc-config,tc-build,tc-restart,tc-finish,tc-sysroot,uc-build,"

# actions to be executed in sequence
all_actions=( ct-extract ct-patch ct-build ct-install tc-cond-init tc-refresh tc-build tc-finish tc-sysroot ct-clean uc-build )
ct_all_actions=( ct-extract ct-patch ct-build ct-install )
tc_all_actions=( tc-cond-init tc-refresh tc-build tc-finish tc-sysroot )
run_actions=( )
cmd_actions="$1"
shift

while [ -n "$cmd_actions" ]; do
	action="${cmd_actions%%,*}"
	cmd_actions="${cmd_actions#$action}" ; cmd_actions="${cmd_actions#,}"
	case "$action" in
		all)    run_actions=( "${run_actions[@]}" "${all_actions[@]}" )
			;;

		ct-all) run_actions=( "${run_actions[@]}" "${ct_all_actions[@]}" )
			;;

		tc-all) run_actions=( "${run_actions[@]}" "${tc_all_actions[@]}" )
			;;

		-*)     # remove this action from all previous actions. Note: do this
			# backwards because bash does not renumber lists when deleting
			# elements.
			i=${#run_actions[@]};
			while [ $i -ge 0 ]; do
				[ "${run_actions[$i]}" == "${action#-}" ] && unset run_actions[$i]
				(( i-- ))
			done
			run_actions=( "${run_actions[@]//${action#-}/}" )
			;;

		*)
			[ "$valid_actions" != "${valid_actions/,$action,/,}" ] || usage "unknown action '$action'"
			run_actions=( "${run_actions[@]}" "$action" )
			;;
	esac
done

[ ${#run_actions[@]} -gt 0 ] || usage "nothing to do!"

while [ ${#run_actions[@]} -gt 0 ]; do
	action="${run_actions[0]}"
	unset run_actions[0]; run_actions=( "${run_actions[@]}" )

	case "$action" in
		help)       usage ;;
		env)        show_env ;;
		show)       echo "Expanded list of actions : ${run_actions[@]}"; echo; exit 0 ;;
		ct-extract)   ct_ng_extract ;;
		ct-patch)     ct_ng_patch   ;;
		ct-build)     ct_ng_build   ;;
		ct-install)   ct_ng_install ;;
		ct-clean)     ct_ng_clean   ;;

		tc-check)     tc_check_configs "$@" ;;
		uc-check)     uc_check_configs "$@" ;;

		cfg-info)     cfg_info "$@" ;;
		src-check)    src_check "$@" ;;

		tc-init)      tc_init "$@" ;;
		tc-cond-init) tc_cond_init "$@" ;;
		tc-refresh)   tc_refresh "$@" ;;
		tc-config)    tc_config "$@" ;;
		tc-build)     tc_build "$@" ;;
		tc-restart)   tc_restart "$@" ;;
		tc-finish)    tc_finish "$@" ;;
		tc-sysroot)   tc_sysroot "$@" ;;

		uc-build)     uc_build "$@" ;;
	esac
done

