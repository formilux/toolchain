#!/bin/bash

# WARNING! need about 2GB in $TC_TMP !

# If a variable V is set, it is passed to most makefiles (use V=1 for more verbosity)

TC_TMP="${TC_TMP-/tmp}"
BUILD="${BUILD-$TC_TMP/flx}"
PROMPT="${PROMPT-}" # prompt config menus
#CT_LOCAL_TARBALLS_DIR="$BUILD/src/"
#
# Sources, patches and config are found in $TC_SRC/{src,patches,config,tools}/
MYSELF=$( readlink -f ${BASH_SOURCE[0]} )
TC_SRC="${TC_SRC-${MYSELF%/*}}"
TC_DST="${TC_DST-/w/dev}"
#TC_USR="${TC_USR-willy}"
#TC_GRP="${TC_GRP-dev}"
#
#CT_PREFIX_DIR="$TC_DST/\${CT_TARGET}"
#
CT_VERSION="${CT_VERSION-1.7.2}"
#CT_BINUTILS_VERSION="${CT_BINUTILS_VERSION-2.20}"
#CT_KERNEL_VERSION="${CT_KERNEL_VERSION-2.6.27.46}"
#CT_LIBC_VERSION="${CT_LIBC_VERSION-2.3.6}"
#UCLIBC_KERNEL_VERSION="${UCLIBC_KERNEL_VERSION-$CT_KERNEL_VERSION}"
#
# When multiple uclibc configs are available, the following variable tells
# which version is preferred (eg: 0.9.28.3).
UCLIBC_PREFERRED_VERSION="${UCLIBC_PREFERRED_VERSION-}"
#SQUASHFS_VERSION="${SQUASHFS_VERSION-2.2-r2}"
#
##GCC_VERSION_LIST='3.4.6 4.2.4'
#GCC_VERSION_LIST="${GCC_VERSION_LIST-3.4.6}"
#ARCH_LIST="${ARCH_LIST-x86_64 i386}"
#
## patches to apply on top of uclibc
#UCLIBC_PATCHES="uclibc-arm-no-asm-page.diff uclibc-armv5te.diff"

##### a few functions

die() {
	echo "Critical error${2+ : $2}" >&2
	exit ${1:-1}
}

# report usage with an optional preliminary error line in $1. Exits with zero
# if no error was given, or 1 if an error was present.
usage() {
	[ -n "$1" ] && echo "Error: $1."
	echo "Usage: ${MYSELF##*/} <actions> [ config file ... ]"
	echo
	echo "<actions> is a comma-delimited list of actions or meta-actions to execute in"
	echo "sequence. If an action is prefixed with '-', it will be removed from all"
	echo "previously expanded actions (eg: 'all,-ct-clean'). Actions and meta actions"
	echo "are listed below, with meta-actions tagged with '*' :"
	echo
	echo "    help         display this help page and exit"
	echo "    show         show expanded list of following actions (eg: show,all) and exit"
	echo "  * all          prepare crosstool-ng and tools, and build all toolchains"
	echo "    ct-extract   extract crosstool-ng"
	echo "    ct-patch     patch crosstool-ng"
	echo "    ct-build     build crosstool-ng"
	echo "    ct-install   install crosstool-ng"
	echo "  * ct-all       all previous ct-* steps"
	echo "    ct-clean     install crosstool-ng"
	echo "    tc-check     check toolchain configs"
	echo "    uc-check     check for presence of associated uclibc configs"
	echo "    cfg-info     report important information gathered from config files"
	echo "    src-check    perform a very basic source availability check"
	echo "    tc-init      copy config files to destination and fail on conflict"
	echo "    tc-cond-init copy config files to destination only if not there"
	echo "    tc-refresh   refresh destination config files (ct-ng oldconfig)"
	echo "    tc-review    review destination config files (ct-ng menuconfig)"
	echo "    tc-build     build toolchains based on destination config files"
	echo "    tc-finish    finish toolchain installation (perms, static libgcc, ...)"
	echo "    tc-sysroot   build the toolchains sysroot archives"
	echo "  * tc-all       all previous tc-* steps except tc-init and tc-review"
	test -z "$1"
	exit $?
}

# check for availability of a source file matching "$1" with a variety of
# extensions and returns the first match in $REPLY with status 0. If none is
# found, 1 is returned.
get_src_path() {
	local ext
	for ext in "" .tar .tar.gz .tgz .tar.bz2 .tbz .tar.xz .txz; do
		REPLY="$TC_SRC/src/${1}${ext}"
		[ -s "$REPLY" ] && return 0
	done
	return 1
}

# check for availability of a source file matching "$1" with a variety of
# extensions and returns the first match in $REPLY with status 0. If none is
# found, die with an error.
get_src_path_safe() {
	get_src_path "$1" && return 0
	die 1 "no source file found in $TC_SRC/src for '${1}'"
}

# retrieves config name $1 (regex) from file $2 an returns it unquoted into
# $REPLY. For easier handling, returns zero only if REPLY equals "y".
get_config_var() {
	[ "$#" = 2 ] || die 1 "get_config_var: incorrect number of args ($#): $*"
	[ -f "$2" ] || die 1 "get_config_var: cannot retrieve var $1 from $2 (no such file)"
	REPLY=$(grep "^$1=" "$2")
	REPLY="${REPLY#*=}"
	REPLY="${REPLY#\"}"
	REPLY="${REPLY%\"}"
	test "$REPLY" = y
}


########## functions used to build and install ct-ng ###########

ct_ng_extract() {
	local p="$PWD"

	cd "$BUILD" || die
	rm -rf "crosstool-ng-$CT_VERSION" || die
	get_src_path_safe "crosstool-ng-$CT_VERSION"
	echo "Extracting $REPLY ..."
	tar xf "$REPLY" || die
	cd "$p"
}

ct_ng_patch() {
	local p="$PWD"

	cd "$BUILD/crosstool-ng-$CT_VERSION" || die
	if [ -d "$TC_SRC/patches/ct-ng-build/$CT_VERSION/." ]; then
		for i in "$TC_SRC/patches/ct-ng-build/$CT_VERSION/"*; do
			echo "Applying patch $i"
			patch -p1 < "$i"|| die
		done
	fi

	if [ -s "$TC_SRC/patches/ct-ng-build/to-remove" ]; then
		for i in $(cat "$TC_SRC/patches/ct-ng-build/to-remove"); do
			rm -vf patches/$i || die
		done
	fi
	cd "$p"
}

ct_ng_build() {
	local p="$PWD"

	cd "$BUILD/crosstool-ng-$CT_VERSION" || die
	./configure --prefix="$BUILD/ct-ng" ${BASH:+--with-bash="$BASH"} || die
	make ${V+V="$V"} || die
	cd "$p"
}

ct_ng_install() {
	local p="$PWD"

	rm -rf "$BUILD/ct-ng"
	cd "$BUILD/crosstool-ng-$CT_VERSION" || die
	make ${V+V="$V"} install || die
	cp -rL "$TC_SRC/patches/ct-ng-patches/." "$BUILD/ct-ng/lib/ct-ng-$CT_VERSION/patches/"
	cd ..
	rm -rf "crosstool-ng-$CT_VERSION"
	cd "$p"
}

ct_ng_clean() {
    echo "Removing ct-ng from temp directory $BUILD..."
    rm -rf "$BUILD/ct-ng"
    echo "done."
}


########## functions used to manipulate toolchain config files ###########

# sets ARCH, ARCHIS64, FAMILY, CC_VERSION, CC_BRANCH, LIBC_VERSION, LIBC_BRANCH,
# BINUTILS_VERSION, VENDOR, ABI and PREF from a ct-ng config file whose name is
# in $1.
tc_set_names() {
	local b64

	ABI=""
	get_config_var "CT_CC_VERSION"       "$1" ; CC_VERSION="$REPLY"
	get_config_var "CT_LIBC_VERSION"     "$1" ; LIBC_VERSION="$REPLY"
	get_config_var "CT_ARCH"             "$1" ; FAMILY="$REPLY"
	get_config_var "CT_ARCH_64"          "$1" ; ARCHIS64="$REPLY"
	get_config_var "CT_BINUTILS_VERSION" "$1" ; BINUTILS_VERSION="$REPLY"
	get_config_var "CT_KERNEL_VERSION"   "$1" ; KERNEL_VERSION="$REPLY"
	get_config_var "CT_VENDOR"           "$1" ; VENDOR="$REPLY"
	get_config_var "CT_ARCH_.*_EABI"     "$1" && ABI="eabi"

	CC_BRANCH="${CC_VERSION#*.*.}" ; CC_BRANCH="${CC_VERSION%.$CC_BRANCH}"
	LIBC_BRANCH="${LIBC_VERSION#*.*.}" ; LIBC_BRANCH="${LIBC_VERSION%.$LIBC_BRANCH}"

	# compute ARCH from FAMILY, ARCHIS64, and CT_ARCH_ARCH
	if [ "$FAMILY" = x86 ]; then
		if [ "$ARCHIS64" = y ]; then
			ARCH=x86_64
		else
		    	get_config_var "CT_ARCH_ARCH" "$1"
			if [ -n "$REPLY" ]; then
				ARCH="$REPLY"
			else
				ARCH="i386"
			fi
		fi
	else
		# some archs exist in both endianess, some of them default
		# to big, other ones to little.

		ARCH="$FAMILY"
		if get_config_var "CT_ARCH_SUPPORTS_BOTH_ENDIAN" "$1"; then
			case "$ARCH" in
			arm)   get_config_var "CT_ARCH_BE" "$1" && ARCH="${ARCH}eb" ;;
			mips)  get_config_var "CT_ARCH_LE" "$1" && ARCH="${ARCH}el" ;;
			esac
		fi

		# some archs have "64" appended to their name for 64-bit variants
		# (eg: sparc4, mips64, ppc64).
		if [ "$ARCHIS64" = y ]; then
			ARCH="${ARCH}64"
		fi
	fi

	# x86: 32b: CT_ARCH_ARCH="", "i586" | 64b: CT_ARCH_ARCH=""
	if [ -z "$VENDOR" ]; then
		VENDOR="gcc${CC_BRANCH%.*}${CC_BRANCH#*.}_libc${LIBC_BRANCH%.*}${LIBC_BRANCH#*.}"
	fi
	PREF="$ARCH-$VENDOR-linux-gnu${ABI}"
}

# Check that all of the config files passed in arguments look right.
tc_check_configs() {
	local file

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	for file in "$@"; do
		[ -e "$file" ] || die 1 "config file $file does not exist"
		[ -f "$file" ] || die 1 "config file $file is not a regular file"
		[ -r "$file" ] || die 1 "config file $file is unreadable"
		[ -s "$file" ] || die 1 "config file $file is empty"
		tc_set_names "$file"
		if [ -z "$FAMILY" -o -z "$ARCH" -o -z "$CC_VERSION" -o \
		     -z "$LIBC_VERSION" -o -z "$VENDOR" -o -z "$PREF" ]; then
			echo "Some settings are wrong or missing with config file $file :"
			echo "  [ mandatory ]  FAMILY=$FAMILY"
			echo "  [ mandatory ]  ARCH=$ARCH"
			echo "  [ mandatory ]  CC_BRANCH=$CC_BRANCH"
			echo "  [ mandatory ]  CC_VERSION=$CC_VERSION"
			echo "  [ mandatory ]  LIBC_BRANCH=$LIBC_BRANCH"
			echo "  [ mandatory ]  LIBC_VERSION=$LIBC_VERSION"
			echo "  [ mandatory ]  BINUTILS_VERSION=$BINUTILS_VERSION"
			echo "  [ mandatory ]  KERNEL_VERSION=$KERNEL_VERSION"
			echo "  [ optional  ]  VENDOR=$VENDOR"
			echo "  [ optional  ]  ARCHIS64=$ARCHIS64"
			echo "  [ optional  ]  ABI=$ABI"
			echo "  [ mandatory ]  PREF=$PREF"
			die 1 "check arguments and/or config files."
		fi
	done
	return 0
}

# Extracts uclibc version number from file name $1 and sets UCLIBC_VERSION
# accordingly. The file name should be in the form /path/uclibc-$VER-anything.
set_uclibc_version() {
	UCLIBC_VERSION="${1##*/}"
	UCLIBC_VERSION="${UCLIBC_VERSION#uclibc-}"
	UCLIBC_VERSION="${UCLIBC_VERSION%%-*}"
}

# Given a ct config file, report in $UCLIBC_FILE what looks like the best uclibc
# config file match or an empty string. Returns 0 only if an exact match is
# found. If a file matches, its name is returned in REPLY, the required uclibc
# version is set in UCLIBC_VERSION, and zero is returned. Otherwise, all matches
# (possibly none) are returned in UCLIBC_FILE and the result is non-zero.
uc_find_best_match() {
	local file="$1"
	local dir

	UCLIBC_VERSION=""
	tc_set_names "$file"
	[ -n "${file##*/*}" ] && dir="." || dir="${file%/*}"

	if [ -n "$UCLIBC_PREFERRED_VERSION" ]; then
		UCLIBC_FILE="${dir}/uclibc-${UCLIBC_PREFERRED_VERSION}-${ARCH}${ABI}"
		if [ -e "$UCLIBC_FILE" ]; then
			set_uclibc_version "$UCLIBC_FILE"
			return 0
		fi
	fi

	UCLIBC_FILE="$(echo ${dir}/uclibc-*-${ARCH}${ABI})"
	if [ -n "$UCLIBC_FILE" -a -n "${UCLIBC_FILE##*\**}" ]; then
		if [ -z "${UCLIBC_FILE##* *}" ]; then
			# No exact uclibc match for config file $file and multiple candidates found : $UCLIBC_FILE
			return 1
		fi
		set_uclibc_version "$UCLIBC_FILE"
		return 0
	fi
	# No exact uclibc match for config file $file
	UCLIBC_FILE=""
	return 1
}

# Check that all of the config files passed in arguments have a pending uclibc
# config file in the same directory. The config files are assumed to have already
# been checked for correctness.
uc_check_configs() {
	local file

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	for file in "$@"; do
		if ! uc_find_best_match "$file"; then
			if [ -z "$UCLIBC_FILE" ]; then
				die 1 "No uclibc match found for config file $file (want 'uclibc-<something>-${ARCH}${ABI}')."
			else
				die 1 "Multiple candidates found for config file $file : $UCLIBC_FILE. You may consider setting the preferred one with UCLIBC_PREFERRED_VERSION."
			fi
		fi

		err=""
		if [ ! -e "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE does not exist"
		elif [ ! -f "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE is not a regular file"
		elif [ ! -r "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE is unreadable"
		elif [ ! -s "$UCLIBC_FILE" ]; then
			err="uclibc config file $UCLIBC_FILE is empty"
		fi
		if [ -n "$err" ]; then
			echo "Failed to find a suitable uclibc config file for this toolchain :"
			echo "    file=$file"
			echo "    FAMILY=$FAMILY"
			echo "    ARCH=$ARCH"
			echo "    CC_BRANCH=$CC_BRANCH"
			echo "    CC_VERSION=$CC_VERSION"
			echo "    LIBC_BRANCH=$LIBC_BRANCH"
			echo "    LIBC_VERSION=$LIBC_VERSION"
			echo "    BINUTILS_VERSION=$BINUTILS_VERSION"
			echo "    KERNEL_VERSION=$KERNEL_VERSION"
			echo "    VENDOR=$VENDOR"
			echo "    ARCHIS64=$ARCHIS64"
			echo "    ABI=$ABI"
			echo "    PREF=$PREF"
			echo "$err"
			die 1 "check config file names."
		fi
	done
	return 0
}

# reports information about all configuration files.
cfg_info() {
	local config

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		[ -n "$V" ] && echo "Checking configuration file $config ..."
		uc_find_best_match "$config"

		echo "    FAMILY=$FAMILY"
		echo "    ARCH=$ARCH"
		echo "    CC_BRANCH=$CC_BRANCH"
		echo "    CC_VERSION=$CC_VERSION"
		echo "    LIBC_BRANCH=$LIBC_BRANCH"
		echo "    LIBC_VERSION=$LIBC_VERSION"
		echo "    BINUTILS_VERSION=$BINUTILS_VERSION"
		echo "    KERNEL_VERSION=$KERNEL_VERSION"
		echo "    VENDOR=$VENDOR"
		echo "    ARCHIS64=$ARCHIS64"
		echo "    ABI=$ABI"
		echo "    PREF=$PREF"
		echo "    UCLIBC_FILE=$UCLIBC_FILE"
		echo "    UCLIBC_VERSION=$UCLIBC_VERSION"
	done
}



########## functions acting on source files ###########

# check source 
src_check() {
	local config file

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		[ -n "$V" ] && echo "Checking source dependencies for config file $config ..."
		uc_find_best_match "$config"
		for file in "gcc-$CC_VERSION" "glibc-$LIBC_VERSION" "binutils-$BINUTILS_VERSION" "uClibc-$UCLIBC_VERSION" "linux-$KERNEL_VERSION"; do
			if ! get_src_path "$file"; then
				die 1 "$file source is missing from $TC_SRC/src"
			else
				[ -n "$V" ] && echo "  -> found $REPLY"
			fi
		done
	done
}

# copy configuration files to the destination. Ignore existing files when
# similar, but fail on conflicts.
tc_init() {
	local p="$PWD"
	local config oldpref

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		uc_find_best_match "$config"

		if [ ! -s "$TC_DST/config-$PREF" ]; then
			echo "Copying config file $config to $TC_DST/config-$PREF ..."
			cp "$config" "$TC_DST/config-$PREF" || die 1
		elif ! cmp -s "$config" "$TC_DST/config-$PREF"; then
			die 1 "Error: $TC_DST/config-$PREF already exists and differs from $config. Please remove it and re-run tc-init, or use tc-cond-init instead to preserve current files"
		fi

		if [ ! -s "$TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI}" ]; then
			echo "Copying uclibc config file $UCLIBC_FILE to $TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI} ..."
			cp "$UCLIBC_FILE" "$TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI}" || die 1
		elif ! cmp -s "$UCLIBC_FILE" "$TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI}"; then
			die 1 "Error: $TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI} already exists and differs from $UCLIBC_FILE. Please remove it and re-run tc-init, or use tc-cond-init instead to preserve current files"
		fi

		# Now check that there is no conflict in the destination directory.
		# Also, calling tc_check_configs will result in updating all global
		# variables including PREF. This is the right moment to check that
		# they are not changed.
		echo "Validating $TC_DST/config-$PREF..."
		oldpref="$PREF"
		tc_check_configs "$TC_DST/config-$PREF"
		if [ "$PREF" != "$oldpref" ]; then
			die 1 "Config file $TC_DST/config-$oldpref should be renamed config-$PREF as it features different settings."
		fi
		uc_check_configs "$TC_DST/config-$PREF"
	done
}

# copy configuration files to the destination only when missing. Existing
# destination files are preserved.
tc_cond_init() {
	local p="$PWD"
	local config oldpref

	[ -x "$BUILD/ct-ng/bin/ct-ng" ] || die 1 "ct-ng is not installed, you may want to run 'ct-all' first."

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		uc_find_best_match "$config"

		if [ ! -s "$TC_DST/config-$PREF" ]; then
			echo "Copying config file $config to $TC_DST/config-$PREF ..."
			cp "$config" "$TC_DST/config-$PREF" || die 1
		elif ! cmp -s "$config" "$TC_DST/config-$PREF"; then
			echo "Note: $TC_DST/config-$PREF differs from $config."
		fi

		if [ ! -s "$TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI}" ]; then
			echo "Copying uclibc config file $UCLIBC_FILE to $TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI} ..."
			cp "$UCLIBC_FILE" "$TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI}" || die 1
		elif ! cmp -s "$UCLIBC_FILE" "$TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI}"; then
			echo "Note: $TC_DST/uclibc-${UCLIBC_VERSION}-${ARCH}${ABI} differs from $UCLIBC_FILE."
		fi

		# Now check that there is no conflict in the destination directory.
		# Also, calling tc_check_configs will result in updating all global
		# variables including PREF. This is the right moment to check that
		# they are not changed.
		echo "Validating $TC_DST/config-$PREF..."
		oldpref="$PREF"
		tc_check_configs "$TC_DST/config-$PREF"
		if [ "$PREF" != "$oldpref" ]; then
			die 1 "Config file $TC_DST/config-$oldpref should be renamed config-$PREF as it features different settings."
		fi
		uc_check_configs "$TC_DST/config-$PREF"
	done
}

# run a "ct-ng oldconfig" on all destination config files. Note that the input
# config files are automatically remapped to their destination counterpart so
# that the input files are never overwritten. The function also supports being
# called with destination files.
tc_refresh() {
	local p="$PWD"
	local in_conf config oldpref

	[ "$#" -gt 0 ] || die 1 "need at least one config file"

	tc_cond_init "$@"
	# now we know that the destination config files exist.

	rm -rf "$BUILD/tc" || die "failed to remove directory '$BUILD/tc' (permission issue ?)."
	mkdir -p "$BUILD/tc" || die

	for in_conf in "$@"; do
		tc_set_names "$in_conf"
		config="$TC_DST/config-$PREF"
		[ "$config" = "$in_conf" ] || echo "Note: using config file $config for toolchain configuration $in_conf."

		tc_check_configs "$config"
		uc_check_configs "$config"

		# show config and retrieve mandatory information
		[ -n "$V" ] && cfg_info "$config"

		#echo "Copying source files from $TC_SRC/src ..."
		#mkdir src && cp "$TC_SRC"/src/* src/ || die
		#echo "Copying and processing config file from $TC_SRC/config ..."

		# fixme: we should copy from an intermediary directory to let the user
		# edit those files.
		cp "$config" "$BUILD/tc/.config" || die 1
		sed -i -e "s#\(CT_LOCAL_TARBALLS_DIR=\).*#\1\"${TC_SRC}/src\"#" "$BUILD/tc/.config"
		sed -i -e "s#\(CT_PREFIX_DIR=\).*#\1\"${TC_DST}/${PREF}\"#" "$BUILD/tc/.config"
		sed -i -e "s#\(CT_TARGET_VENDOR=\).*#\1\"${VENDOR}\"#" "$BUILD/tc/.config"
		#sed -i -e "s#\(CT_CC_VERSION=\).*#\1\"${CC_VERSION}\"#" "$BUILD/tc/.config"
		#sed -i -e "s#\(CT_BINUTILS_VERSION=\).*#\1\"${BINUTILS_VERSION}\"#" "$BUILD/tc/.config"
		#sed -i -e "s#\(CT_KERNEL_VERSION=\).*#\1\"${KERNEL_VERSION}\"#" "$BUILD/tc/.config"
		#sed -i -e "s#\(CT_LIBC_VERSION=\).*#\1\"${LIBC_VERSION}\"#" "$BUILD/tc/.config"

		cd "$BUILD/tc" || die
		"$BUILD/ct-ng/bin/ct-ng" oldconfig || die 1
		cd "$p"

		oldpref="$PREF"
		tc_set_names "$BUILD/tc/.config"
		if [ "$PREF" == "$oldpref" ]; then
			echo -n "Updating $config ..."
			cp "$BUILD/tc/.config" "$config" || die 1
			echo " done."
		else
			echo "WARNING! some settings have changed which caused the target to change from $oldpref to $PREF."
			echo "For this reason, I'm not overwriting the original file. This can happen when"
			echo "using a different version of crosstool-ng than the one used to build the initial"
			echo "file (current version: $CT_VERSION). Please see new versions below."
			echo
			cfg_info "$BUILD/tc/.config"
			echo
			if [ -s "$TC_DST/config-$PREF" ]; then
				echo "$TC_DST/config-$PREF already exists, saving as $TC_DST/config-$PREF.new."
				echo "Please fix by hand and re-run from this directory's files."
				die 1
			else
				echo "The configuration has been saved as $TC_DST/config-$PREF."
				echo "Please re-run from this directory's files to avoid any issue."
				die 1
			fi
		fi
	done
	echo "Removing build directory $BUILD/tc ..."
	rm -rf "$BUILD/tc"
	cd "$p"
}

# build all toolchains for configs passed in arguments
tc_build() {
	local p="$PWD"
	local config

	[ "$#" -gt 0 ] || die 1 "need at least one config file"
	tc_check_configs "$@"
	uc_check_configs "$@"

	for config in "$@"; do
		echo "Building toolchain for configuration file $config ..."
		# show config and retrieve mandatory information
		cfg_info "$config"

		rm -rf "$BUILD/tc" || die "failed to remove directory '$BUILD/tc' (permission issue ?)."

		mkdir -p "$BUILD/tc" || die
		cd "$BUILD/tc" || die
		#echo "Copying source files from $TC_SRC/src ..."
		#mkdir src && cp "$TC_SRC"/src/* src/ || die
		#echo "Copying and processing config file from $TC_SRC/config ..."

		# fixme: we should copy from an intermediary directory to let the user
		# edit those files.
		cp "$config" .config
		sed -i -e "s#\(CT_LOCAL_TARBALLS_DIR=\).*#\1\"${TC_SRC}/src\"#" .config
		sed -i -e "s#\(CT_PREFIX_DIR=\).*#\1\"${TC_DST}/${PREF}\"#" .config
		sed -i -e "s#\(CT_TARGET_VENDOR=\).*#\1\"${VENDOR}\"#" .config
		#sed -i -e "s#\(CT_CC_VERSION=\).*#\1\"${CC_VERSION}\"#" .config
		#sed -i -e "s#\(CT_BINUTILS_VERSION=\).*#\1\"${BINUTILS_VERSION}\"#" .config
		#sed -i -e "s#\(CT_KERNEL_VERSION=\).*#\1\"${KERNEL_VERSION}\"#" .config
		#sed -i -e "s#\(CT_LIBC_VERSION=\).*#\1\"${LIBC_VERSION}\"#" .config

		"$BUILD/ct-ng/bin/ct-ng" oldconfig

		echo ARCH=$ARCH GCC=$GCC_VERSION
		if [ "$PROMPT" = "1" ] ; then
			echo "You should now review the configuration. Press [enter] to proceed."
			read n

			"$BUILD/ct-ng/bin/ct-ng" menuconfig

			echo "Ready to build. Press [enter] to proceed."
			read n
		fi

		sed -i -e "s#\. .*/\.config#. $PWD/.config#" "$BUILD/ct-ng/lib/ct-ng-$CT_VERSION/scripts/crosstool-NG.sh"
		"$BUILD/ct-ng/bin/ct-ng" build ${V+V="$V"} || die
		echo; echo "# ct-ng build complete.";echo

		# Note: the installation directory might not match exactly
		# because ct-ng might have added a suffix (eg: "eabi" for arm).
		PREF=$(echo ${TC_DST}/${PREF}*)
		PREF=${PREF##*/}
		echo "Found toolchain under $PREF"
		sudo chown -R "$TC_USR":"$TC_GRP" "$TC_DST/$PREF" || die
		sudo chmod -R 755 "$TC_DST/$PREF" || die

		rm -f "$TC_DST/$PREF/$PREF"/sys-root/lib/libgcc_s.so*
		ln -s libgcc.a "$TC_DST/$PREF/lib/gcc/$PREF/$GCC_VERSION"/libgcc_s.a || die

		cd "$TC_DST/$PREF/$PREF" || die
		echo "Archiving sys-root ..."
		tar zcf "sys-root_$PREF.tar.gz" sys-root

		echo "Removing build directory $BUILD/tc ..."
		rm -rf "$BUILD/tc"
	done
	cd "$p"
}


############################# MAIN ############################

# comma-delimited list of known actions, must start and end with a comma.
valid_actions=",help,show,all,ct-extract,ct-patch,ct-build,ct-install,ct-all,ct-clean,tc-check,uc-check,cfg-info,src-check,tc-init,tc-cond-init,tc-refresh,"

# actions to be executed in sequence
all_actions=( ct-extract ct-patch ct-build ct-install ct-clean )
ct_all_actions=( ct-extract ct-patch ct-build ct-install )
run_actions=( )
cmd_actions="$1"
shift

while [ -n "$cmd_actions" ]; do
	action="${cmd_actions%%,*}"
	cmd_actions="${cmd_actions#$action}" ; cmd_actions="${cmd_actions#,}"
	case "$action" in
		all)    run_actions=( "${run_actions[@]}" "${all_actions[@]}" )
			;;

		ct-all) run_actions=( "${run_actions[@]}" "${ct_all_actions[@]}" )
			;;

		-*)     # remove this action from all previous actions. Note: do this
			# backwards because bash does not renumber lists when deleting
			# elements.
			i=${#run_actions[@]};
			while [ $i -ge 0 ]; do
				[ "${run_actions[$i]}" == "${action#-}" ] && unset run_actions[$i]
				(( i-- ))
			done
			run_actions=( "${run_actions[@]//${action#-}/}" )
			;;

		*)
			[ "$valid_actions" != "${valid_actions/,$action,/,}" ] || usage "unknown action '$action'"
			run_actions=( "${run_actions[@]}" "$action" )
			;;
	esac
done

[ ${#run_actions[@]} -gt 0 ] || usage "nothing to do!"

while [ ${#run_actions[@]} -gt 0 ]; do
	action="${run_actions[0]}"
	unset run_actions[0]; run_actions=( "${run_actions[@]}" )

	case "$action" in
		help)       usage ;;
		show)       echo "Expanded list of actions : ${run_actions[@]}"; echo; exit 0 ;;
		ct-extract)   ct_ng_extract ;;
		ct-patch)     ct_ng_patch   ;;
		ct-build)     ct_ng_build   ;;
		ct-install)   ct_ng_install ;;
		ct-clean)     ct_ng_clean   ;;

		tc-check)     tc_check_configs "$@" ;;
		uc-check)     uc_check_configs "$@" ;;

		tc-init)      tc_init "$@" ;;
		tc-cond-init) tc_cond_init "$@" ;;
		tc-refresh)   tc_refresh "$@" ;;

		cfg-info)     cfg_info "$@" ;;
		src-check)    src_check "$@" ;;

	esac
done

#############################################################################

exit 0
echo "TC_SRC=$TC_SRC"

tc_check_configs "$@"
uc_check_configs "$@"

extract_and_patch_ct_ng
build_and_install_ct_ng
exit 0
clean_ct_ng

# uclibc is optional and is disabled by emptying its version
#[ -n "$UCLIBC_VERSION" ] || continue

exit 0

tc_set_names "$1"
echo "FAMILY=$FAMILY"
echo "ARCH=$ARCH"
echo "ARCHIS64=$ARCHIS64"
echo "CC_BRANCH=$CC_BRANCH"
echo "CC_VERSION=$CC_VERSION"
echo "LIBC_BRANCH=$LIBC_BRANCH"
echo "LIBC_VERSION=$LIBC_VERSION"
echo "ABI=$ABI"
echo "VENDOR=$VENDOR"
echo "PREF=$PREF"
exit 0

clean_dest() {
	[ -e "$TC_DST" ] || return
	echo "Warning: destination directory exists ($TC_DST)"
	echo "Ready to remove it, are you sure ?"
	echo "Press Enter to continue or Ctrl-C to abort."
	read n
	[ -n "$n" ] && exit 1

	# first attempt without being root
	echo "Removing $TC_DST."
	rm -rf "$TC_DST"
	if [ -e "$TC_DST" ]; then
		echo "Some contents would not be removed, retrying as root."
		sudo rm -rf "$TC_DST"
	fi
	if [ -e "$TC_DST" ]; then
		die 1 "could not remove destination directory."
	fi
	echo "Done."
}

check_sources() {
	# wget -c http://ymorin.is-a-geek.org/download/crosstool-ng/crosstool-ng-$CT_VERSION.tar.bz2
	# wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-$UCLIBC_KERNEL_VERSION.tar.bz2
	# wget http://www.uclibc.org/downloads/old-releases/uClibc-$UCLIBC_VERSION.tar.bz2
	# wget http://sourceforge.net/projects/squashfs/files/squashfs/squashfs$SQUASHFS_VERSION/squashfs$SQUASHFS_VERSION.tar.gz/download

	[ -s "$TC_SRC/src/crosstool-ng-$CT_VERSION.tar.bz2" ] || die 1 "$TC_SRC/src/crosstool-ng-$CT_VERSION.tar.bz2 not found"
	[ -s "$TC_SRC/src/linux-$UCLIBC_KERNEL_VERSION.tar.bz2" ] || die 1 "$TC_SRC/src/linux-$UCLIBC_KERNEL_VERSION.tar.bz2 not found"
	[ -s "$TC_SRC/src/uClibc-$UCLIBC_VERSION.tar.bz2" ] || die 1 "$TC_SRC/src/uClibc-$UCLIBC_VERSION.tar.bz2 not found"
	[ -s "$TC_SRC/src/squashfs$SQUASHFS_VERSION.tar.gz" ] || die 1 "$TC_SRC/src/squashfs$SQUASHFS_VERSION.tar.gz not found"
}

build_toolchains() {
    rm -rf "$BUILD/tc" || die "failed to remove directory '$BUILD/tc' (permission issue ?)."

    for i in $ARCH_LIST; do
	ARCH="$i"
	for j in $GCC_VERSION_LIST; do
		GCC_VERSION="$j"

		CT_TARGET_VENDOR=gcc$(echo $GCC_VERSION | awk -F . '{ print $1$2 }')_glibc$(echo $CT_LIBC_VERSION | awk -F . '{ print $1$2 }')
		CT_CC_VERSION="$GCC_VERSION"
		PREF="$ARCH"-"$CT_TARGET_VENDOR"-linux-gnu

		mkdir -p "$BUILD/tc" || die
		cd "$BUILD/tc" || die
		echo "Copying source files from $TC_SRC/src ..."
		mkdir src && cp "$TC_SRC"/src/* src/ || die

		echo "Copying and processing config file from $TC_SRC/config ..."

		cp "$TC_SRC/config/CONFIG_GCC${j%%.*}_${i}" .config
		sed -i -e "s#\(CT_LOCAL_TARBALLS_DIR=\).*#\1\"$CT_LOCAL_TARBALLS_DIR\"#" .config
		sed -i -e "s#\(CT_PREFIX_DIR=\).*#\1\"$CT_PREFIX_DIR\"#" .config
		sed -i -e "s#\(CT_TARGET_VENDOR=\).*#\1\"$CT_TARGET_VENDOR\"#" .config
		sed -i -e "s#\(CT_CC_VERSION=\).*#\1\"$CT_CC_VERSION\"#" .config
		sed -i -e "s#\(CT_BINUTILS_VERSION=\).*#\1\"$CT_BINUTILS_VERSION\"#" .config
		sed -i -e "s#\(CT_KERNEL_VERSION=\).*#\1\"$CT_KERNEL_VERSION\"#" .config
		sed -i -e "s#\(CT_LIBC_VERSION=\).*#\1\"$CT_LIBC_VERSION\"#" .config

		"$TC_DST/ct-ng/bin/ct-ng" oldconfig

		echo ARCH=$ARCH GCC=$GCC_VERSION
		if [ "$PROMPT" = "1" ] ; then
			echo "You should now review the configuration. Press [enter] to proceed."
			read n

			"$TC_DST/ct-ng/bin/ct-ng" menuconfig

			echo "Ready to build. Press [enter] to proceed."
			read n
		fi

		sed -i -e "s#\. .*/\.config#. $PWD/.config#" "$TC_DST/ct-ng/lib/ct-ng-$CT_VERSION/scripts/crosstool-NG.sh"
		"$TC_DST/ct-ng/bin/ct-ng" build ${V+V="$V"} || die
		echo; echo "# ct-ng build complete.";echo

		# Note: the installation directory might not match exactly
		# because ct-ng might have added a suffix (eg: "eabi" for arm).
		PREF=$(echo ${TC_DST}/${PREF}*)
		PREF=${PREF##*/}
		echo "Found toolchain under $PREF"
		sudo chown -R "$TC_USR":"$TC_GRP" "$TC_DST/$PREF" || die
		sudo chmod -R 755 "$TC_DST/$PREF" || die

		rm -f "$TC_DST/$PREF/$PREF"/sys-root/lib/libgcc_s.so*
		ln -s libgcc.a "$TC_DST/$PREF/lib/gcc/$PREF/$GCC_VERSION"/libgcc_s.a || die

		cd "$TC_DST/$PREF/$PREF" || die
		echo "Archiving sys-root ..."
		tar zcf "sys-root_$PREF.tar.gz" sys-root

		echo "Removing build directory $BUILD/tc ..."
		rm -rf "$BUILD/tc"
	done
    done
}

prepare_kernel() {
	cd "$TC_DST" || die
	echo "Extracting kernel from $TC_SRC/src ..."
	tar jxf "$TC_SRC/src/linux-$UCLIBC_KERNEL_VERSION.tar.bz2"
}

# To be called with ARCH=<arch> and PREF=<valid cross-compiler prefix>
prepare_kernel_for_arch() {
	(
	# do that in a sub-process to return to original directory
	echo "Configuring kernel in $TC_DST/linux-$UCLIBC_KERNEL_VERSION"
	cd "$TC_DST/linux-$UCLIBC_KERNEL_VERSION" || die
	make ARCH=$ARCH CROSS_COMPILE="$TC_DST/$PREF/bin/$PREF-" ${V+V="$V"} mrproper || die
	make ARCH=$ARCH CROSS_COMPILE="$TC_DST/$PREF/bin/$PREF-" ${V+V="$V"} defconfig || die
	make ARCH=$ARCH CROSS_COMPILE="$TC_DST/$PREF/bin/$PREF-" ${V+V="$V"} prepare < /dev/null || die
	make ARCH=$ARCH CROSS_COMPILE="$TC_DST/$PREF/bin/$PREF-" ${V+V="$V"} clean

	# some archs' includes have moved in recent kernels
	if [ ! -e "$TC_DST/linux-$UCLIBC_KERNEL_VERSION/include/asm/mman.h" ]; then
		echo "Updating kernel include link"
		rm -f $TC_DST/linux-$UCLIBC_KERNEL_VERSION/include/asm
		ln -s ../arch/$ARCH/include/asm $TC_DST/linux-$UCLIBC_KERNEL_VERSION/include/asm
	fi
	)
}

clean_kernel() {
	(
	# do that in a sub-process to return to original directory
	echo "Cleaning kernel in $TC_DST/linux-$UCLIBC_KERNEL_VERSION"
	cd "$TC_DST/linux-$UCLIBC_KERNEL_VERSION" || die
	make ARCH=$ARCH CROSS_COMPILE="$TC_DST/$PREF/bin/$PREF-" ${V+V="$V"} mrproper || die
	)
}

build_uclibc() {
	KERNEL_SOURCE="$TC_DST/linux-$UCLIBC_KERNEL_VERSION"
	KERNEL_HEADERS="$KERNEL_SOURCE/include"
	RUNTIME_PREFIX="$TC_DST/\${TARGET_ARCH}-linux-uclibc/"
	DEVEL_PREFIX="$TC_DST/\${TARGET_ARCH}-linux-uclibc/usr/"

	cd "$BUILD" || die
	echo "Extracting uClibc from $TC_SRC/src ..."
	tar jxf "$TC_SRC/src/uClibc-$UCLIBC_VERSION".tar.bz2
	cd "uClibc-$UCLIBC_VERSION" || die

	for i in $UCLIBC_PATCHES; do
		echo "Applying patch $i"
		patch -p1 < "$TC_SRC/patches/$i" || die
	done

    	for i in $ARCH_LIST; do
		ARCH="$i"
		PREF=$(echo ${TC_DST}/$i-gcc34_glibc23-linux-gnu*)
		PREF=${PREF##*/}
		echo "Found toolchain under $PREF"

		prepare_kernel_for_arch

		make distclean
		cp "$TC_SRC/config/CONFIG_UCLIBC_$i" .config
		make ${V+V="$V"} oldconfig < /dev/null || die
		sed -i -e "s#\(KERNEL_SOURCE=\).*#\1\"$KERNEL_SOURCE\"#"   .config
		sed -i -e "s#\(KERNEL_HEADERS=\).*#\1\"$KERNEL_HEADERS\"#" .config
		sed -i -e "s#\(RUNTIME_PREFIX=\).*#\1\"$RUNTIME_PREFIX\"#" .config
		sed -i -e "s#\(DEVEL_PREFIX=\).*#\1\"$DEVEL_PREFIX\"#"     .config

		if [ "$PROMPT" = "1" ] ; then
			echo "You should now review the configuration. Press [enter] to proceed."
			read n
			make menuconfig || die

			echo "Ready to build. Press [enter] to proceed."
			read n
		fi

		make ${V+V="$V"} CROSS="$TC_DST/$PREF/bin/$PREF-" || die
		make ${V+V="$V"} CROSS="$TC_DST/$PREF/bin/$PREF-" install || die

	done
	clean_kernel
	cd ..
	rm -rf "uClibc-$UCLIBC_VERSION"

	# install uclibc wrapper
	mkdir -p "$TC_DST/tools/bin" || die
	cp "$TC_SRC/addons/uclibc" "$TC_DST/tools/bin/" || die
}


build_squashfs() {
	cd "$BUILD" || die
	echo "Extracting squashfs from $TC_SRC/src ..."
	tar zxf "$TC_SRC/src/squashfs$SQUASHFS_VERSION.tar.gz"
	cd "squashfs$SQUASHFS_VERSION/squashfs-tools" || die
	make || die
	mkdir -p "$TC_DST/tools/bin" || die
	mv mksquashfs "$TC_DST/tools/bin/" || die
	cd ../..
	rm -rf "squashfs$SQUASHFS_VERSION"
}

###### Main entry point.

clean_dest
check_sources
extract_and_patch_ct_ng
build_ct_ng
build_toolchains
prepare_kernel
build_uclibc
build_squashfs

echo; echo "Finished, build appeared successful."

