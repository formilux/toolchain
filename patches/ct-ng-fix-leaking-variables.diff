Sans ce patch, pas possible de compiler gcc en x86_64 depuis un i586,
parce que la variable CC fuit depuis un build précédent et référence
du x86_64, qui n'est bien entendu pas compatible avec la machine de
build. Et on a le même phénomène en tentant de compiler un gcc 4.3.4
pour arm (première partie du patch cette fois-ci).

--- ct-ng-1.7.2/scripts/build/cc/gcc.sh.orig	2011-10-24 14:21:49 +0200
+++ ct-ng-1.7.2/scripts/build/cc/gcc.sh	2011-10-24 14:21:51 +0200
@@ -100,6 +100,10 @@
     # In normal conditions, ( "${mode}" = "shared" ) implies
     # ( "${build_libgcc}" = "yes" ), but I won't check for that
 
+    # these ones might have leaked from previous packages and cause disruption here,
+    # especially AR, CC and RANLIB which break x86_64 builds from i586.
+    unset AR CC CC_FOR_BUILD CFLAGS CPP CPPFLAGS CROSS LD LDFLAGS RANLIB
+
     CT_DoStep INFO "Installing ${mode} core C compiler"
     mkdir -p "${CT_BUILD_DIR}/build-cc-core-${mode}"
     cd "${CT_BUILD_DIR}/build-cc-core-${mode}"
@@ -282,6 +282,10 @@
     # If building for bare metal, nothing to be done here, the static core conpiler is enough!
     [ "${CT_BARE_METAL}" = "y" ] && return 0
 
+    # these ones might have leaked from previous packages and cause disruption here,
+    # especially AR, CC and RANLIB which break x86_64 builds from i586.
+    unset AR CC CC_FOR_BUILD CFLAGS CPP CPPFLAGS CROSS LD LDFLAGS RANLIB
+
     CT_DoStep INFO "Installing final compiler"
 
     mkdir -p "${CT_BUILD_DIR}/build-cc"
