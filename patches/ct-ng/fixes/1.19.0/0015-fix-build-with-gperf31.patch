# based on https://github.com/crosstool-ng/crosstool-ng/commit/3bb2bcd2a328fb56332398783e91899ce3bc3556
diff --git a/Makefile.in b/Makefile.in
index 895983b..7b271d3 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -69,6 +69,7 @@ export objdump         := @OBJDUMP@
 export readelf         := @READELF@
 export patch           := @PATCH@
 export gperf           := @GPERF@
+export gperf_len_type  := @GPERF_LEN_TYPE@
 export CC              := @CC@
 export CPP             := @CPP@
 export CPPFLAGS        := @CPPFLAGS@
diff --git a/configure.ac b/configure.ac
index df3f9dd..7ba4d7a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -268,6 +268,22 @@ AC_CACHE_CHECK([for GNU automake >= 1.10], [ac_cv_path_automake],
          AC_MSG_ERROR([could not find GNU automake >= 1.10])])])
 AC_SUBST([automake], [$ac_cv_path_automake])
 
+#----------------------------------------
+# Gperf 3.1 started generating functions with size_t rather than unsigned int
+AC_MSG_CHECKING([for the type used in gperf declarations])
+echo "#include <string.h>" > conftest.gperf.c
+echo "const char * in_word_set(const char *, GPERF_LEN_TYPE);" >> conftest.gperf.c
+echo foo,bar | ${GPERF} -L ANSI-C >> conftest.gperf.c
+AS_IF([${CC} -c -o /dev/null conftest.gperf.c -DGPERF_LEN_TYPE='size_t' >/dev/null 2>&1],
+            [AC_MSG_RESULT([size_t])
+             GPERF_LEN_TYPE='size_t'],
+        [${CC} -c -o /dev/null conftest.gperf.c -DGPERF_LEN_TYPE='unsigned int' >/dev/null 2>&1],
+            [AC_MSG_RESULT([unsigned int])
+             GPERF_LEN_TYPE='unsigned int'],
+        [AC_MSG_ERROR([unable to determine gperf len type])])
+rm -f conftest.gperf.c
+AC_SUBST([GPERF_LEN_TYPE])
+
 #--------------------------------------------------------------------
 # Boring again... But still a bit of work to do...
 #--------------------------------------------------------------------
diff --git a/kconfig/Makefile b/kconfig/Makefile
index f7db96a..d538a80 100644
--- a/kconfig/Makefile
+++ b/kconfig/Makefile
@@ -6,7 +6,7 @@ all: conf mconf nconf
 	@true   # Just be silent, you fscking son of a fscking beach...
 
 # Build flags
-CFLAGS = -DCONFIG_=\"CT_\" -DPACKAGE="\"crosstool-NG $(VERSION)\""
+CFLAGS = -DCONFIG_=\"CT_\" -DPACKAGE="\"crosstool-NG $(VERSION)\"" -DGPERF_LEN_TYPE="$(gperf_len_type)"
 LDFLAGS =
 
 # Compiler flags to use gettext
diff --git a/kconfig/zconf.gperf b/kconfig/zconf.gperf
index c9e690e..0867ffe 100644
--- a/kconfig/zconf.gperf
+++ b/kconfig/zconf.gperf
@@ -9,7 +9,7 @@
 
 struct kconf_id;
 
-static struct kconf_id *kconf_id_lookup(register const char *str, register unsigned int len);
+static struct kconf_id *kconf_id_lookup(register const char *str, register GPERF_LEN_TYPE len);
 
 %%
 mainmenu,	T_MAINMENU,	TF_COMMAND
diff --git a/configure b/configure
index b9d0e85..57312cb 100755
--- a/configure
+++ b/configure
@@ -634,6 +634,7 @@ cvs
 lzma
 xz
 kconfig_options
+GPERF_LEN_TYPE
 automake
 LIBTOOLIZE
 LIBTOOL
@@ -5169,6 +5170,27 @@ $as_echo "$ac_cv_path_automake" >&6; }
 automake=$ac_cv_path_automake
 
 
+#----------------------------------------
+# Gperf 3.1 started generating functions with size_t rather than unsigned int
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for the type used in gperf declarations" >&5
+$as_echo_n "checking for the type used in gperf declarations... " >&6; }
+echo "#include <string.h>" > conftest.gperf.c
+echo "const char * in_word_set(const char *, GPERF_LEN_TYPE);" >> conftest.gperf.c
+echo foo,bar | ${GPERF} -L ANSI-C >> conftest.gperf.c
+if ${CC} -c -o /dev/null conftest.gperf.c -DGPERF_LEN_TYPE='size_t' >/dev/null 2>&1; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
+$as_echo "size_t" >&6; }
+             GPERF_LEN_TYPE='size_t'
+elif ${CC} -c -o /dev/null conftest.gperf.c -DGPERF_LEN_TYPE='unsigned int' >/dev/null 2>&1; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsigned int" >&5
+$as_echo "unsigned int" >&6; }
+             GPERF_LEN_TYPE='unsigned int'
+else
+  as_fn_error $? "unable to determine gperf len type" "$LINENO" 5
+fi
+rm -f conftest.gperf.c
+
+
 #--------------------------------------------------------------------
 # Boring again... But still a bit of work to do...
 #--------------------------------------------------------------------

